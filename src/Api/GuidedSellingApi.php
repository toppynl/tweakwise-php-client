<?php
/**
 * GuidedSellingApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Toppy\TweakwiseClient\ApiException;
use Toppy\TweakwiseClient\Configuration;
use Toppy\TweakwiseClient\DebugPlugin;
use Toppy\TweakwiseClient\HeaderSelector;
use Toppy\TweakwiseClient\FormDataProcessor;
use Toppy\TweakwiseClient\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * GuidedSellingApi Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GuidedSellingApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://gateway.tweakwisenavigator.com');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation guidedSellingCompare
     *
     * Compare
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Compare code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;tn_qs_{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a pipe (|).   *Example: ?tn_qs_1&#x3D;1%7C2&amp;tn_qs_2&#x3D;3* (optional)
     * @param  float[] $tnSkipQs Collection of skipped questions.   *Example: ?tn_skip_qs&#x3D;2%2C4%2C6 or ?tn_skip_qs&#x3D;2&amp;tn_skip_qs&#x3D;4&amp;tn_skip_qs&#x3D;6* (optional)
     * @param  float $ps Page size, amount of desired products   *Default value: 12*  *Maximum value: 100* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\Advisor
     */
    public function guidedSellingCompare($instancekey, $code, $tWNSource = null, $answers = null, $tnSkipQs = null, $ps = null)
    {
        list($response) = $this->guidedSellingCompareWithHttpInfo($instancekey, $code, $tWNSource, $answers, $tnSkipQs, $ps);
        return $response;
    }

    /**
     * Operation guidedSellingCompareWithHttpInfo
     *
     * Compare
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Compare code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;tn_qs_{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a pipe (|).   *Example: ?tn_qs_1&#x3D;1%7C2&amp;tn_qs_2&#x3D;3* (optional)
     * @param  float[] $tnSkipQs Collection of skipped questions.   *Example: ?tn_skip_qs&#x3D;2%2C4%2C6 or ?tn_skip_qs&#x3D;2&amp;tn_skip_qs&#x3D;4&amp;tn_skip_qs&#x3D;6* (optional)
     * @param  float $ps Page size, amount of desired products   *Default value: 12*  *Maximum value: 100* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\Advisor, HTTP status code, HTTP response headers (array of strings)
     */
    public function guidedSellingCompareWithHttpInfo($instancekey, $code, $tWNSource = null, $answers = null, $tnSkipQs = null, $ps = null)
    {
        $request = $this->guidedSellingCompareRequest($instancekey, $code, $tWNSource, $answers, $tnSkipQs, $ps);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\Advisor',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\Advisor',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\Advisor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation guidedSellingCompareAsync
     *
     * Compare
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Compare code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;tn_qs_{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a pipe (|).   *Example: ?tn_qs_1&#x3D;1%7C2&amp;tn_qs_2&#x3D;3* (optional)
     * @param  float[] $tnSkipQs Collection of skipped questions.   *Example: ?tn_skip_qs&#x3D;2%2C4%2C6 or ?tn_skip_qs&#x3D;2&amp;tn_skip_qs&#x3D;4&amp;tn_skip_qs&#x3D;6* (optional)
     * @param  float $ps Page size, amount of desired products   *Default value: 12*  *Maximum value: 100* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function guidedSellingCompareAsync($instancekey, $code, $tWNSource = null, $answers = null, $tnSkipQs = null, $ps = null)
    {
        return $this->guidedSellingCompareAsyncWithHttpInfo($instancekey, $code, $tWNSource, $answers, $tnSkipQs, $ps)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation guidedSellingCompareAsyncWithHttpInfo
     *
     * Compare
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Compare code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;tn_qs_{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a pipe (|).   *Example: ?tn_qs_1&#x3D;1%7C2&amp;tn_qs_2&#x3D;3* (optional)
     * @param  float[] $tnSkipQs Collection of skipped questions.   *Example: ?tn_skip_qs&#x3D;2%2C4%2C6 or ?tn_skip_qs&#x3D;2&amp;tn_skip_qs&#x3D;4&amp;tn_skip_qs&#x3D;6* (optional)
     * @param  float $ps Page size, amount of desired products   *Default value: 12*  *Maximum value: 100* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function guidedSellingCompareAsyncWithHttpInfo($instancekey, $code, $tWNSource = null, $answers = null, $tnSkipQs = null, $ps = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\Advisor';
        $request = $this->guidedSellingCompareRequest($instancekey, $code, $tWNSource, $answers, $tnSkipQs, $ps);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'guidedSellingCompare'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Compare code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;tn_qs_{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a pipe (|).   *Example: ?tn_qs_1&#x3D;1%7C2&amp;tn_qs_2&#x3D;3* (optional)
     * @param  float[] $tnSkipQs Collection of skipped questions.   *Example: ?tn_skip_qs&#x3D;2%2C4%2C6 or ?tn_skip_qs&#x3D;2&amp;tn_skip_qs&#x3D;4&amp;tn_skip_qs&#x3D;6* (optional)
     * @param  float $ps Page size, amount of desired products   *Default value: 12*  *Maximum value: 100* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function guidedSellingCompareRequest($instancekey, $code, $tWNSource = null, $answers = null, $tnSkipQs = null, $ps = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling guidedSellingCompare'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling guidedSellingCompare'
            );
        }

        $resourcePath = '/advisor/{instancekey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($code !== null) {
            if('form' === 'form' && is_array($code)) {
                foreach($code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['code'] = $code;
            }
        }
        // query params
        if ($answers !== null) {
            if('form' === 'form' && is_array($answers)) {
                foreach($answers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['answers'] = $answers;
            }
        }
        // query params
        if ($tnSkipQs !== null) {
            if('form' === 'form' && is_array($tnSkipQs)) {
                foreach($tnSkipQs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_skip_qs'] = $tnSkipQs;
            }
        }
        // query params
        if ($ps !== null) {
            if('form' === 'form' && is_array($ps)) {
                foreach($ps as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ps'] = $ps;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation guidedSellingFunnel
     *
     * Funnel
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Funnel code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  float $catid The category which must contain the results found.   *Example: ?catid&#x3D;100* (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;qs{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a comma (,).   *Example: ?qs1&#x3D;1%2C2&amp;qs2&#x3D;3* (optional)
     * @param  float[] $skipQs Collection of skipped questions.   *Example: ?skip_qs&#x3D;2%2C4%2C6 or ?skip_qs&#x3D;2&amp;skip_qs&#x3D;4&amp;skip_qs&#x3D;6* (optional)
     * @param  float $take Maximum desired amount of products. (optional)
     * @param  float $skip Amount of products to skip (useful for paging). (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\FilterWizard
     */
    public function guidedSellingFunnel($instancekey, $code, $tWNSource = null, $catid = null, $answers = null, $skipQs = null, $take = null, $skip = null, $tnUseFilters = null)
    {
        list($response) = $this->guidedSellingFunnelWithHttpInfo($instancekey, $code, $tWNSource, $catid, $answers, $skipQs, $take, $skip, $tnUseFilters);
        return $response;
    }

    /**
     * Operation guidedSellingFunnelWithHttpInfo
     *
     * Funnel
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Funnel code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  float $catid The category which must contain the results found.   *Example: ?catid&#x3D;100* (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;qs{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a comma (,).   *Example: ?qs1&#x3D;1%2C2&amp;qs2&#x3D;3* (optional)
     * @param  float[] $skipQs Collection of skipped questions.   *Example: ?skip_qs&#x3D;2%2C4%2C6 or ?skip_qs&#x3D;2&amp;skip_qs&#x3D;4&amp;skip_qs&#x3D;6* (optional)
     * @param  float $take Maximum desired amount of products. (optional)
     * @param  float $skip Amount of products to skip (useful for paging). (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\FilterWizard, HTTP status code, HTTP response headers (array of strings)
     */
    public function guidedSellingFunnelWithHttpInfo($instancekey, $code, $tWNSource = null, $catid = null, $answers = null, $skipQs = null, $take = null, $skip = null, $tnUseFilters = null)
    {
        $request = $this->guidedSellingFunnelRequest($instancekey, $code, $tWNSource, $catid, $answers, $skipQs, $take, $skip, $tnUseFilters);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\FilterWizard',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\FilterWizard',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\FilterWizard',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation guidedSellingFunnelAsync
     *
     * Funnel
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Funnel code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  float $catid The category which must contain the results found.   *Example: ?catid&#x3D;100* (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;qs{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a comma (,).   *Example: ?qs1&#x3D;1%2C2&amp;qs2&#x3D;3* (optional)
     * @param  float[] $skipQs Collection of skipped questions.   *Example: ?skip_qs&#x3D;2%2C4%2C6 or ?skip_qs&#x3D;2&amp;skip_qs&#x3D;4&amp;skip_qs&#x3D;6* (optional)
     * @param  float $take Maximum desired amount of products. (optional)
     * @param  float $skip Amount of products to skip (useful for paging). (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function guidedSellingFunnelAsync($instancekey, $code, $tWNSource = null, $catid = null, $answers = null, $skipQs = null, $take = null, $skip = null, $tnUseFilters = null)
    {
        return $this->guidedSellingFunnelAsyncWithHttpInfo($instancekey, $code, $tWNSource, $catid, $answers, $skipQs, $take, $skip, $tnUseFilters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation guidedSellingFunnelAsyncWithHttpInfo
     *
     * Funnel
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Funnel code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  float $catid The category which must contain the results found.   *Example: ?catid&#x3D;100* (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;qs{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a comma (,).   *Example: ?qs1&#x3D;1%2C2&amp;qs2&#x3D;3* (optional)
     * @param  float[] $skipQs Collection of skipped questions.   *Example: ?skip_qs&#x3D;2%2C4%2C6 or ?skip_qs&#x3D;2&amp;skip_qs&#x3D;4&amp;skip_qs&#x3D;6* (optional)
     * @param  float $take Maximum desired amount of products. (optional)
     * @param  float $skip Amount of products to skip (useful for paging). (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function guidedSellingFunnelAsyncWithHttpInfo($instancekey, $code, $tWNSource = null, $catid = null, $answers = null, $skipQs = null, $take = null, $skip = null, $tnUseFilters = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\FilterWizard';
        $request = $this->guidedSellingFunnelRequest($instancekey, $code, $tWNSource, $catid, $answers, $skipQs, $take, $skip, $tnUseFilters);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'guidedSellingFunnel'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $code Funnel code. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  float $catid The category which must contain the results found.   *Example: ?catid&#x3D;100* (optional)
     * @param  array<string,string> $answers Answer(s) to questions formatted as key-value pairs.  The key of the question being answered has format &#x60;qs{n}&#x60;, where &#x60;n&#x60; is the ID of the question being answered.  The value contains the ID(s) of the answer(s) to the question. When multiple answers are provided, they should be separated by a comma (,).   *Example: ?qs1&#x3D;1%2C2&amp;qs2&#x3D;3* (optional)
     * @param  float[] $skipQs Collection of skipped questions.   *Example: ?skip_qs&#x3D;2%2C4%2C6 or ?skip_qs&#x3D;2&amp;skip_qs&#x3D;4&amp;skip_qs&#x3D;6* (optional)
     * @param  float $take Maximum desired amount of products. (optional)
     * @param  float $skip Amount of products to skip (useful for paging). (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function guidedSellingFunnelRequest($instancekey, $code, $tWNSource = null, $catid = null, $answers = null, $skipQs = null, $take = null, $skip = null, $tnUseFilters = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling guidedSellingFunnel'
            );
        }
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling guidedSellingFunnel'
            );
        }

        $resourcePath = '/filterwizard/{instancekey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($code !== null) {
            if('form' === 'form' && is_array($code)) {
                foreach($code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['code'] = $code;
            }
        }
        // query params
        if ($catid !== null) {
            if('form' === 'form' && is_array($catid)) {
                foreach($catid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['catid'] = $catid;
            }
        }
        // query params
        if ($answers !== null) {
            if('form' === 'form' && is_array($answers)) {
                foreach($answers as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['answers'] = $answers;
            }
        }
        // query params
        if ($skipQs !== null) {
            if('form' === 'form' && is_array($skipQs)) {
                foreach($skipQs as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip_qs'] = $skipQs;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($tnUseFilters !== null) {
            if('form' === 'form' && is_array($tnUseFilters)) {
                foreach($tnUseFilters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_use_filters'] = $tnUseFilters;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
