<?php
/**
 * FacetsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Toppy\TweakwiseClient\ApiException;
use Toppy\TweakwiseClient\Configuration;
use Toppy\TweakwiseClient\DebugPlugin;
use Toppy\TweakwiseClient\HeaderSelector;
use Toppy\TweakwiseClient\FormDataProcessor;
use Toppy\TweakwiseClient\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * FacetsApi Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FacetsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://gateway.tweakwisenavigator.com');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation facetAttributes
     *
     * Facet attributes
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $urlkey The url key of the facet attribute. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\FacetAttributesResponse
     */
    public function facetAttributes($instancekey, $urlkey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        list($response) = $this->facetAttributesWithHttpInfo($instancekey, $urlkey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey);
        return $response;
    }

    /**
     * Operation facetAttributesWithHttpInfo
     *
     * Facet attributes
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $urlkey The url key of the facet attribute. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\FacetAttributesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function facetAttributesWithHttpInfo($instancekey, $urlkey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        $request = $this->facetAttributesRequest($instancekey, $urlkey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\FacetAttributesResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\FacetAttributesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\FacetAttributesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation facetAttributesAsync
     *
     * Facet attributes
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $urlkey The url key of the facet attribute. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function facetAttributesAsync($instancekey, $urlkey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        return $this->facetAttributesAsyncWithHttpInfo($instancekey, $urlkey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facetAttributesAsyncWithHttpInfo
     *
     * Facet attributes
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $urlkey The url key of the facet attribute. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function facetAttributesAsyncWithHttpInfo($instancekey, $urlkey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\FacetAttributesResponse';
        $request = $this->facetAttributesRequest($instancekey, $urlkey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'facetAttributes'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $urlkey The url key of the facet attribute. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function facetAttributesRequest($instancekey, $urlkey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling facetAttributes'
            );
        }
        // verify the required parameter 'urlkey' is set
        if ($urlkey === null || (is_array($urlkey) && count($urlkey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $urlkey when calling facetAttributes'
            );
        }

        $resourcePath = '/facets/{urlkey}/attributes/{instancekey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnQ !== null) {
            if('form' === 'form' && is_array($tnQ)) {
                foreach($tnQ as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_q'] = $tnQ;
            }
        }
        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnUseFilters !== null) {
            if('form' === 'form' && is_array($tnUseFilters)) {
                foreach($tnUseFilters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_use_filters'] = $tnUseFilters;
            }
        }
        // query params
        if ($tnFilters !== null) {
            if('form' === 'form' && is_array($tnFilters)) {
                foreach($tnFilters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_filters'] = $tnFilters;
            }
        }
        // query params
        if ($tnFt !== null) {
            if('form' === 'form' && is_array($tnFt)) {
                foreach($tnFt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_ft'] = $tnFt;
            }
        }
        // query params
        if ($tnSt !== null) {
            if('form' === 'form' && is_array($tnSt)) {
                foreach($tnSt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_st'] = $tnSt;
            }
        }
        // query params
        if ($tnB !== null) {
            if('form' === 'form' && is_array($tnB)) {
                foreach($tnB as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_b'] = $tnB;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if ($tnKeyboard !== null) {
            if('form' === 'form' && is_array($tnKeyboard)) {
                foreach($tnKeyboard as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_keyboard'] = $tnKeyboard;
            }
        }
        // query params
        if ($tnProfilekey !== null) {
            if('form' === 'form' && is_array($tnProfilekey)) {
                foreach($tnProfilekey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_profilekey'] = $tnProfilekey;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }
        // path params
        if ($urlkey !== null) {
            $resourcePath = str_replace(
                '{' . 'urlkey' . '}',
                ObjectSerializer::toPathValue($urlkey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation facets
     *
     * Facets
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\FacetsResponse
     */
    public function facets($instancekey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        list($response) = $this->facetsWithHttpInfo($instancekey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey);
        return $response;
    }

    /**
     * Operation facetsWithHttpInfo
     *
     * Facets
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\FacetsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function facetsWithHttpInfo($instancekey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        $request = $this->facetsRequest($instancekey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\FacetsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\FacetsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\FacetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation facetsAsync
     *
     * Facets
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function facetsAsync($instancekey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        return $this->facetsAsyncWithHttpInfo($instancekey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation facetsAsyncWithHttpInfo
     *
     * Facets
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function facetsAsyncWithHttpInfo($instancekey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\FacetsResponse';
        $request = $this->facetsRequest($instancekey, $tWNSource, $tnQ, $tnCid, $tnUseFilters, $tnFilters, $tnFt, $tnSt, $tnB, $tnParameters, $tnParametersExcept, $tnKeyboard, $tnProfilekey);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'facets'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnUseFilters Whether or not navigation urls returned in the response use the tn_filters parameter (?tn_filters&#x3D;brand%3DCoca%20Cola%26volume%3D1L, instead of ?tn_fk_brand&#x3D;Coca%20Cola&amp;tn_fk_volume&#x3D;1L).   *Example: ?tn_use_filters&#x3D;true* (optional)
     * @param  string $tnFilters A list of key/value pairs of the filters that should be applied. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_filters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_filters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  float $tnFt Explicitly specify the ID of the filter template to use. This will overrule any filter template that would otherwise be applied.   *Example: ?tn_ft&#x3D;2* (optional)
     * @param  float $tnSt Explicitly specify the ID of the sorting template to use. This will overrule any sorting template that would otherwise be applied.   *Example: ?tn_st&#x3D;4* (optional)
     * @param  float $tnB Explicitly specify the ID of the builder to use. This will overrule any builder that would otherwise be applied.   *Example: &amp;tn_b&#x3D;8* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function facetsRequest($instancekey, $tWNSource = null, $tnQ = null, $tnCid = null, $tnUseFilters = null, $tnFilters = null, $tnFt = null, $tnSt = null, $tnB = null, $tnParameters = null, $tnParametersExcept = null, $tnKeyboard = null, $tnProfilekey = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling facets'
            );
        }

        $resourcePath = '/facets/{instancekey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnQ !== null) {
            if('form' === 'form' && is_array($tnQ)) {
                foreach($tnQ as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_q'] = $tnQ;
            }
        }
        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnUseFilters !== null) {
            if('form' === 'form' && is_array($tnUseFilters)) {
                foreach($tnUseFilters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_use_filters'] = $tnUseFilters;
            }
        }
        // query params
        if ($tnFilters !== null) {
            if('form' === 'form' && is_array($tnFilters)) {
                foreach($tnFilters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_filters'] = $tnFilters;
            }
        }
        // query params
        if ($tnFt !== null) {
            if('form' === 'form' && is_array($tnFt)) {
                foreach($tnFt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_ft'] = $tnFt;
            }
        }
        // query params
        if ($tnSt !== null) {
            if('form' === 'form' && is_array($tnSt)) {
                foreach($tnSt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_st'] = $tnSt;
            }
        }
        // query params
        if ($tnB !== null) {
            if('form' === 'form' && is_array($tnB)) {
                foreach($tnB as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_b'] = $tnB;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if ($tnKeyboard !== null) {
            if('form' === 'form' && is_array($tnKeyboard)) {
                foreach($tnKeyboard as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_keyboard'] = $tnKeyboard;
            }
        }
        // query params
        if ($tnProfilekey !== null) {
            if('form' === 'form' && is_array($tnProfilekey)) {
                foreach($tnProfilekey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_profilekey'] = $tnProfilekey;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
