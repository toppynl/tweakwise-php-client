<?php
/**
 * RecommendationsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Toppy\TweakwiseClient\ApiException;
use Toppy\TweakwiseClient\Configuration;
use Toppy\TweakwiseClient\DebugPlugin;
use Toppy\TweakwiseClient\HeaderSelector;
use Toppy\TweakwiseClient\FormDataProcessor;
use Toppy\TweakwiseClient\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * RecommendationsApi Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RecommendationsApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://gateway.tweakwisenavigator.com');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation featuredRecommendations
     *
     * Featured products
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $displayId The id of the featured recommendation. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\FeaturedRecommendations
     */
    public function featuredRecommendations($instancekey, $displayId, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        list($response) = $this->featuredRecommendationsWithHttpInfo($instancekey, $displayId, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);
        return $response;
    }

    /**
     * Operation featuredRecommendationsWithHttpInfo
     *
     * Featured products
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $displayId The id of the featured recommendation. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\FeaturedRecommendations, HTTP status code, HTTP response headers (array of strings)
     */
    public function featuredRecommendationsWithHttpInfo($instancekey, $displayId, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $request = $this->featuredRecommendationsRequest($instancekey, $displayId, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\FeaturedRecommendations',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\FeaturedRecommendations',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\FeaturedRecommendations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation featuredRecommendationsAsync
     *
     * Featured products
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $displayId The id of the featured recommendation. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function featuredRecommendationsAsync($instancekey, $displayId, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        return $this->featuredRecommendationsAsyncWithHttpInfo($instancekey, $displayId, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation featuredRecommendationsAsyncWithHttpInfo
     *
     * Featured products
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $displayId The id of the featured recommendation. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function featuredRecommendationsAsyncWithHttpInfo($instancekey, $displayId, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\FeaturedRecommendations';
        $request = $this->featuredRecommendationsRequest($instancekey, $displayId, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'featuredRecommendations'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $displayId The id of the featured recommendation. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function featuredRecommendationsRequest($instancekey, $displayId, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling featuredRecommendations'
            );
        }
        // verify the required parameter 'displayId' is set
        if ($displayId === null || (is_array($displayId) && count($displayId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $displayId when calling featuredRecommendations'
            );
        }

        $resourcePath = '/recommendations/featured/{instancekey}/{displayId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if ($tnProfilekey !== null) {
            if('form' === 'form' && is_array($tnProfilekey)) {
                foreach($tnProfilekey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_profilekey'] = $tnProfilekey;
            }
        }
        // query params
        if ($tnEdcParameters !== null) {
            if('form' === 'form' && is_array($tnEdcParameters)) {
                foreach($tnEdcParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_edc_parameters'] = $tnEdcParameters;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }
        // path params
        if ($displayId !== null) {
            $resourcePath = str_replace(
                '{' . 'displayId' . '}',
                ObjectSerializer::toPathValue($displayId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation productRecommendationsAll
     *
     * Product recommendations
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\ProductRecommendations
     */
    public function productRecommendationsAll($instancekey, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        list($response) = $this->productRecommendationsAllWithHttpInfo($instancekey, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);
        return $response;
    }

    /**
     * Operation productRecommendationsAllWithHttpInfo
     *
     * Product recommendations
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\ProductRecommendations, HTTP status code, HTTP response headers (array of strings)
     */
    public function productRecommendationsAllWithHttpInfo($instancekey, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $request = $this->productRecommendationsAllRequest($instancekey, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\ProductRecommendations',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\ProductRecommendations',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\ProductRecommendations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation productRecommendationsAllAsync
     *
     * Product recommendations
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productRecommendationsAllAsync($instancekey, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        return $this->productRecommendationsAllAsyncWithHttpInfo($instancekey, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productRecommendationsAllAsyncWithHttpInfo
     *
     * Product recommendations
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productRecommendationsAllAsyncWithHttpInfo($instancekey, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\ProductRecommendations';
        $request = $this->productRecommendationsAllRequest($instancekey, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'productRecommendationsAll'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function productRecommendationsAllRequest($instancekey, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling productRecommendationsAll'
            );
        }
        // verify the required parameter 'productNo' is set
        if ($productNo === null || (is_array($productNo) && count($productNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productNo when calling productRecommendationsAll'
            );
        }

        $resourcePath = '/recommendations/product/{instancekey}/{productNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if ($tnProfilekey !== null) {
            if('form' === 'form' && is_array($tnProfilekey)) {
                foreach($tnProfilekey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_profilekey'] = $tnProfilekey;
            }
        }
        // query params
        if ($tnEdcParameters !== null) {
            if('form' === 'form' && is_array($tnEdcParameters)) {
                foreach($tnEdcParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_edc_parameters'] = $tnEdcParameters;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }
        // path params
        if ($productNo !== null) {
            $resourcePath = str_replace(
                '{' . 'productNo' . '}',
                ObjectSerializer::toPathValue($productNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation productRecommendationsSingle
     *
     * Product recommendations single rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productRecId The ID of the up and cross selling rule. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\ProductRecommendation
     */
    public function productRecommendationsSingle($instancekey, $productRecId, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        list($response) = $this->productRecommendationsSingleWithHttpInfo($instancekey, $productRecId, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);
        return $response;
    }

    /**
     * Operation productRecommendationsSingleWithHttpInfo
     *
     * Product recommendations single rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productRecId The ID of the up and cross selling rule. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\ProductRecommendation, HTTP status code, HTTP response headers (array of strings)
     */
    public function productRecommendationsSingleWithHttpInfo($instancekey, $productRecId, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $request = $this->productRecommendationsSingleRequest($instancekey, $productRecId, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\ProductRecommendation',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\ProductRecommendation',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\ProductRecommendation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation productRecommendationsSingleAsync
     *
     * Product recommendations single rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productRecId The ID of the up and cross selling rule. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productRecommendationsSingleAsync($instancekey, $productRecId, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        return $this->productRecommendationsSingleAsyncWithHttpInfo($instancekey, $productRecId, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productRecommendationsSingleAsyncWithHttpInfo
     *
     * Product recommendations single rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productRecId The ID of the up and cross selling rule. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productRecommendationsSingleAsyncWithHttpInfo($instancekey, $productRecId, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\ProductRecommendation';
        $request = $this->productRecommendationsSingleRequest($instancekey, $productRecId, $productNo, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'productRecommendationsSingle'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productRecId The ID of the up and cross selling rule. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function productRecommendationsSingleRequest($instancekey, $productRecId, $productNo, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling productRecommendationsSingle'
            );
        }
        // verify the required parameter 'productRecId' is set
        if ($productRecId === null || (is_array($productRecId) && count($productRecId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productRecId when calling productRecommendationsSingle'
            );
        }
        // verify the required parameter 'productNo' is set
        if ($productNo === null || (is_array($productNo) && count($productNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productNo when calling productRecommendationsSingle'
            );
        }

        $resourcePath = '/recommendations/product/{instancekey}/{productRecId}/{productNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if ($tnProfilekey !== null) {
            if('form' === 'form' && is_array($tnProfilekey)) {
                foreach($tnProfilekey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_profilekey'] = $tnProfilekey;
            }
        }
        // query params
        if ($tnEdcParameters !== null) {
            if('form' === 'form' && is_array($tnEdcParameters)) {
                foreach($tnEdcParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_edc_parameters'] = $tnEdcParameters;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }
        // path params
        if ($productRecId !== null) {
            $resourcePath = str_replace(
                '{' . 'productRecId' . '}',
                ObjectSerializer::toPathValue($productRecId),
                $resourcePath
            );
        }
        // path params
        if ($productNo !== null) {
            $resourcePath = str_replace(
                '{' . 'productNo' . '}',
                ObjectSerializer::toPathValue($productNo),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation productRecommendationsSingleGrouped
     *
     * Product recommendations multi rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $groupKey This is a tag for a recommendation, which allows the recommendations to be grouped.  All available groups and their group keys can be retrieved with the catalog call: /catalog/recommendation/product/groups/{instancekey}. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\ProductRecommendationGrouped
     */
    public function productRecommendationsSingleGrouped($instancekey, $productNo, $groupKey, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        list($response) = $this->productRecommendationsSingleGroupedWithHttpInfo($instancekey, $productNo, $groupKey, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);
        return $response;
    }

    /**
     * Operation productRecommendationsSingleGroupedWithHttpInfo
     *
     * Product recommendations multi rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $groupKey This is a tag for a recommendation, which allows the recommendations to be grouped.  All available groups and their group keys can be retrieved with the catalog call: /catalog/recommendation/product/groups/{instancekey}. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\ProductRecommendationGrouped, HTTP status code, HTTP response headers (array of strings)
     */
    public function productRecommendationsSingleGroupedWithHttpInfo($instancekey, $productNo, $groupKey, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $request = $this->productRecommendationsSingleGroupedRequest($instancekey, $productNo, $groupKey, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\ProductRecommendationGrouped',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\ProductRecommendationGrouped',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\ProductRecommendationGrouped',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation productRecommendationsSingleGroupedAsync
     *
     * Product recommendations multi rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $groupKey This is a tag for a recommendation, which allows the recommendations to be grouped.  All available groups and their group keys can be retrieved with the catalog call: /catalog/recommendation/product/groups/{instancekey}. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productRecommendationsSingleGroupedAsync($instancekey, $productNo, $groupKey, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        return $this->productRecommendationsSingleGroupedAsyncWithHttpInfo($instancekey, $productNo, $groupKey, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productRecommendationsSingleGroupedAsyncWithHttpInfo
     *
     * Product recommendations multi rule
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $groupKey This is a tag for a recommendation, which allows the recommendations to be grouped.  All available groups and their group keys can be retrieved with the catalog call: /catalog/recommendation/product/groups/{instancekey}. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function productRecommendationsSingleGroupedAsyncWithHttpInfo($instancekey, $productNo, $groupKey, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\ProductRecommendationGrouped';
        $request = $this->productRecommendationsSingleGroupedRequest($instancekey, $productNo, $groupKey, $tWNSource, $tnCid, $tnParameters, $tnParametersExcept, $tnProfilekey, $tnEdcParameters);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'productRecommendationsSingleGrouped'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $productNo Product (article number) for which up and cross selling must be retrieved on the basis of the indicated rule. (required)
     * @param  string $groupKey This is a tag for a recommendation, which allows the recommendations to be grouped.  All available groups and their group keys can be retrieved with the catalog call: /catalog/recommendation/product/groups/{instancekey}. (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string $tnProfilekey The profile key is an identifier for the person browsing your website who is initiating the navigation requests. This same identifier should also be used to identify the visitor when sending events to our Analytics API. Based on the sent events, the visitor can receive personalized results.  The profile key can be any string as long as it is unique to the visitor. Generate for example a Universally Unique Identifier (UUID), a new id per visitor or use an account id.   *Example: ?tn_profilekey&#x3D;ff106b0a-b5bf-43fc-945c-318f17cda425* (optional)
     * @param  string $tnEdcParameters Extra parameters for external data components can be added to the URL by using the parameter &#39;tn_edc_parameters&#39;.  For example, to send 2 extra parameters: &#39;firstParameter&#39; and &#39;secondParameter&#39; to external data components, using the following string: firstParameter&#x3D;firstValue&amp;secondParameter&#x3D;secondValue  This value should then be URL encoded.  *Example: ?tn_edc_parameters&#x3D;firstParameter%3DfirstValue%26secondParameter%3DsecondValue* (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function productRecommendationsSingleGroupedRequest($instancekey, $productNo, $groupKey, $tWNSource = null, $tnCid = null, $tnParameters = null, $tnParametersExcept = null, $tnProfilekey = null, $tnEdcParameters = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling productRecommendationsSingleGrouped'
            );
        }
        // verify the required parameter 'productNo' is set
        if ($productNo === null || (is_array($productNo) && count($productNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productNo when calling productRecommendationsSingleGrouped'
            );
        }
        // verify the required parameter 'groupKey' is set
        if ($groupKey === null || (is_array($groupKey) && count($groupKey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $groupKey when calling productRecommendationsSingleGrouped'
            );
        }

        $resourcePath = '/recommendations/grouped/{instancekey}/{productNo}/{groupKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if ($tnProfilekey !== null) {
            if('form' === 'form' && is_array($tnProfilekey)) {
                foreach($tnProfilekey as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_profilekey'] = $tnProfilekey;
            }
        }
        // query params
        if ($tnEdcParameters !== null) {
            if('form' === 'form' && is_array($tnEdcParameters)) {
                foreach($tnEdcParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_edc_parameters'] = $tnEdcParameters;
            }
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }
        // path params
        if ($productNo !== null) {
            $resourcePath = str_replace(
                '{' . 'productNo' . '}',
                ObjectSerializer::toPathValue($productNo),
                $resourcePath
            );
        }
        // path params
        if ($groupKey !== null) {
            $resourcePath = str_replace(
                '{' . 'groupKey' . '}',
                ObjectSerializer::toPathValue($groupKey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
