<?php
/**
 * AutocompleteApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Api;

use GuzzleHttp\Psr7\MultipartStream;
use Http\Client\Common\Plugin\ErrorPlugin;
use Http\Client\Common\Plugin\RedirectPlugin;
use Http\Client\Common\PluginClient;
use Http\Client\Common\PluginClientFactory;
use Http\Client\Exception\HttpException;
use Http\Client\HttpAsyncClient;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Http\Message\RequestFactory;
use Http\Promise\Promise;
use Toppy\TweakwiseClient\ApiException;
use Toppy\TweakwiseClient\Configuration;
use Toppy\TweakwiseClient\DebugPlugin;
use Toppy\TweakwiseClient\HeaderSelector;
use Toppy\TweakwiseClient\FormDataProcessor;
use Toppy\TweakwiseClient\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestFactoryInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamFactoryInterface;
use Psr\Http\Message\UriFactoryInterface;
use Psr\Http\Message\UriInterface;
use function sprintf;

/**
 * AutocompleteApi Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutocompleteApi
{
    /**
     * @var PluginClient
     */
    protected $httpClient;

    /**
     * @var PluginClient
     */
    protected $httpAsyncClient;

    /**
     * @var UriFactoryInterface
     */
    protected $uriFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @var RequestFactoryInterface
     */
    protected $requestFactory;

    /**
     * @var StreamFactoryInterface
     */
    protected $streamFactory;

    public function __construct(
        ?ClientInterface $httpClient = null,
        ?Configuration $config = null,
        ?HttpAsyncClient $httpAsyncClient = null,
        ?UriFactoryInterface $uriFactory = null,
        ?RequestFactoryInterface $requestFactory = null,
        ?StreamFactoryInterface $streamFactory = null,
        ?HeaderSelector $selector = null,
        ?array $plugins = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?? (new Configuration())->setHost('https://gateway.tweakwisenavigator.com');
        $this->requestFactory = $requestFactory ?? Psr17FactoryDiscovery::findRequestFactory();
        $this->streamFactory = $streamFactory ?? Psr17FactoryDiscovery::findStreamFactory();

        $plugins = $plugins ?? [
            new RedirectPlugin(['strict' => true]),
            new ErrorPlugin(),
        ];

        if ($this->config->getDebug()) {
            $plugins[] = new DebugPlugin(fopen($this->config->getDebugFile(), 'ab'));
        }

        $this->httpClient = (new PluginClientFactory())->createClient(
            $httpClient ?? Psr18ClientDiscovery::find(),
            $plugins
        );

        $this->httpAsyncClient = (new PluginClientFactory())->createClient(
            $httpAsyncClient ?? HttpAsyncClientDiscovery::find(),
            $plugins
        );

        $this->uriFactory = $uriFactory ?? Psr17FactoryDiscovery::findUriFactory();

        $this->headerSelector = $selector ?? new HeaderSelector();

        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation autocomplete
     *
     * Autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\Autocomplete
     */
    public function autocomplete($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        list($response) = $this->autocompleteWithHttpInfo($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions);
        return $response;
    }

    /**
     * Operation autocompleteWithHttpInfo
     *
     * Autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\Autocomplete, HTTP status code, HTTP response headers (array of strings)
     */
    public function autocompleteWithHttpInfo($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        $request = $this->autocompleteRequest($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\Autocomplete',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\Autocomplete',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\Autocomplete',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation autocompleteAsync
     *
     * Autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function autocompleteAsync($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        return $this->autocompleteAsyncWithHttpInfo($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autocompleteAsyncWithHttpInfo
     *
     * Autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function autocompleteAsyncWithHttpInfo($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\Autocomplete';
        $request = $this->autocompleteRequest($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'autocomplete'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function autocompleteRequest($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling autocomplete'
            );
        }
        // verify the required parameter 'tnQ' is set
        if ($tnQ === null || (is_array($tnQ) && count($tnQ) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tnQ when calling autocomplete'
            );
        }

        $resourcePath = '/autocomplete/{instancekey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnQ !== null) {
            if('form' === 'form' && is_array($tnQ)) {
                foreach($tnQ as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_q'] = $tnQ;
            }
        }
        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnItems !== null) {
            if('form' === 'form' && is_array($tnItems)) {
                foreach($tnItems as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_items'] = $tnItems;
            }
        }
        // query params
        if ($tnSuggestions !== null) {
            if('form' === 'form' && is_array($tnSuggestions)) {
                foreach($tnSuggestions as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_suggestions'] = $tnSuggestions;
            }
        }
        // query params
        if ($tnInstant !== null) {
            if('form' === 'form' && is_array($tnInstant)) {
                foreach($tnInstant as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_instant'] = $tnInstant;
            }
        }
        // query params
        if ($tnMaxresults !== null) {
            if('form' === 'form' && is_array($tnMaxresults)) {
                foreach($tnMaxresults as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_maxresults'] = $tnMaxresults;
            }
        }
        // query params
        if ($tnLang !== null) {
            if('form' === 'form' && is_array($tnLang)) {
                foreach($tnLang as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_lang'] = $tnLang;
            }
        }
        // query params
        if ($tnKeyboard !== null) {
            if('form' === 'form' && is_array($tnKeyboard)) {
                foreach($tnKeyboard as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_keyboard'] = $tnKeyboard;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if (is_array($tnOptions)) {
            $tnOptions = ObjectSerializer::serializeCollection($tnOptions, 'form', true);
        }
        if ($tnOptions !== null) {
            $queryParams['tn_options'] = $tnOptions;
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }

    /**
     * Operation autocompleteGrouped
     *
     * Grouped autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Toppy\TweakwiseClient\Model\AutocompleteGrouped
     */
    public function autocompleteGrouped($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        list($response) = $this->autocompleteGroupedWithHttpInfo($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions);
        return $response;
    }

    /**
     * Operation autocompleteGroupedWithHttpInfo
     *
     * Grouped autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \Toppy\TweakwiseClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Toppy\TweakwiseClient\Model\AutocompleteGrouped, HTTP status code, HTTP response headers (array of strings)
     */
    public function autocompleteGroupedWithHttpInfo($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        $request = $this->autocompleteGroupedRequest($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions);

        try {
            try {
                $response = $this->httpClient->sendRequest($request);
            } catch (HttpException $e) {
                $response = $e->getResponse();
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $response->getStatusCode(),
                        (string) $request->getUri()
                    ),
                    $request,
                    $response,
                    $e
                );
            } catch (ClientExceptionInterface $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $request,
                    null,
                    $e
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Toppy\TweakwiseClient\Model\AutocompleteGrouped',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Toppy\TweakwiseClient\Model\AutocompleteGrouped',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Toppy\TweakwiseClient\Model\AutocompleteGrouped',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation autocompleteGroupedAsync
     *
     * Grouped autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function autocompleteGroupedAsync($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        return $this->autocompleteGroupedAsyncWithHttpInfo($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autocompleteGroupedAsyncWithHttpInfo
     *
     * Grouped autocomplete
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \InvalidArgumentException
     * @return Promise
     */
    public function autocompleteGroupedAsyncWithHttpInfo($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        $returnType = '\Toppy\TweakwiseClient\Model\AutocompleteGrouped';
        $request = $this->autocompleteGroupedRequest($instancekey, $tnQ, $tWNSource, $tnCid, $tnItems, $tnSuggestions, $tnInstant, $tnMaxresults, $tnLang, $tnKeyboard, $tnParameters, $tnParametersExcept, $tnOptions);

        return $this->httpAsyncClient->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function (HttpException $exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $exception->getRequest(),
                        $exception->getResponse(),
                        $exception
                    );
                }
            );
    }

    /**
     * Create request for operation 'autocompleteGrouped'
     *
     * @param  string $instancekey Instance specific key. (required)
     * @param  string $tnQ Search term entered by the user.   *Maximum length: 100* (required)
     * @param  string $tWNSource The source of the request. See [the article on the request source](https://docs.tweakwise.com/reference/request-source) for more information. (optional)
     * @param  string $tnCid The category that should contain the filtered results. If you want to provide the entire path, you should include the categories divided by a hyphen (-).   *Example: ?tn_cid&#x3D;100-150* (optional)
     * @param  bool $tnItems Display product suggestions.   *Default value: true* (optional)
     * @param  bool $tnSuggestions Display keyword suggestions.   *Default value: true* (optional)
     * @param  bool $tnInstant Use instant search.   *Default value: false* (optional)
     * @param  float $tnMaxresults The number of results that will be returned per component.   *Default value: 6*  *Maximum value: 20* (optional)
     * @param  string $tnLang Specify the language to use for the search algorithms.  All available languages can be retrieved with the catalog call: /catalog/languages/{instancekey}   *Example: ?tn_lang&#x3D;nl* (optional)
     * @param  string $tnKeyboard Specify the keyboard to use for the search algorithms.  All available options are: &#39;qwerty&#39;, &#39;azerty&#39; or &#39;qwertz&#39;   *Example: ?tn_keyboard&#x3D;azerty* (optional)
     * @param  string $tnParameters Hidden parameters can be added to the URL by using the parameter &#39;tn_parameters&#39;. The key is the facet URL-name. The value is the facet value that should be applied. When using multiple values they should be separated using a pipe (|).  When filtering drinks by property &#39;brand&#39; with value &#39;Coca Cola&#39; or &#39;Pepsi&#39; and &#39;volume&#39; 1L or 1.5L, the value of tn_parameters should be: brand&#x3D;Coca Cola|Pepsi&amp;volume&#x3D;1L|1.5L  *Example: ?tn_parameters&#x3D;brand%3DCoca%20Cola%7CPepsi%26volume%3D1L%7C1.5L* (optional)
     * @param  string $tnParametersExcept Hidden exclusion parameters can be added to the URL by using the parameter &#39;tn_parameters_except&#39;.  This is used to exclude certain parameters from the results (show everything except specified parameters)  When filtering by property &#39;brand&#39; with value &#39;Coca Cola&#39; or with value &#39;Pepsi&#39; the value of tn_parameters_except should be: brand&#x3D;Coca Cola&amp;brand&#x3D;Pepsi  This value should then be URL encoded.  *Example: ?tn_parameters_except&#x3D;brand%3DCoca%20Cola%26brand%3DPepsi* (optional)
     * @param  string[] $tnOptions A comma-separated list of toggles.  - NoBuilder: Prevents the configured builder from being applied; handles the request as if no builder were configured.\&quot;, \&quot;?tn_options&#x3D;NoBuilder - NoEDC: Prevents calls to External Data Components configured in builders; handles the request as if no External Data Components were configured.\&quot;, \&quot;?tn_options&#x3D;NoEDC (optional)
     *
     * @throws \InvalidArgumentException
     * @return RequestInterface
     */
    public function autocompleteGroupedRequest($instancekey, $tnQ, $tWNSource = null, $tnCid = null, $tnItems = null, $tnSuggestions = null, $tnInstant = null, $tnMaxresults = null, $tnLang = null, $tnKeyboard = null, $tnParameters = null, $tnParametersExcept = null, $tnOptions = null)
    {
        // verify the required parameter 'instancekey' is set
        if ($instancekey === null || (is_array($instancekey) && count($instancekey) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $instancekey when calling autocompleteGrouped'
            );
        }
        // verify the required parameter 'tnQ' is set
        if ($tnQ === null || (is_array($tnQ) && count($tnQ) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tnQ when calling autocompleteGrouped'
            );
        }

        $resourcePath = '/autocomplete/grouped/{instancekey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = null;
        $multipart = false;

        // query params
        if ($tnQ !== null) {
            if('form' === 'form' && is_array($tnQ)) {
                foreach($tnQ as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_q'] = $tnQ;
            }
        }
        // query params
        if ($tnCid !== null) {
            if('form' === 'form' && is_array($tnCid)) {
                foreach($tnCid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_cid'] = $tnCid;
            }
        }
        // query params
        if ($tnItems !== null) {
            if('form' === 'form' && is_array($tnItems)) {
                foreach($tnItems as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_items'] = $tnItems;
            }
        }
        // query params
        if ($tnSuggestions !== null) {
            if('form' === 'form' && is_array($tnSuggestions)) {
                foreach($tnSuggestions as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_suggestions'] = $tnSuggestions;
            }
        }
        // query params
        if ($tnInstant !== null) {
            if('form' === 'form' && is_array($tnInstant)) {
                foreach($tnInstant as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_instant'] = $tnInstant;
            }
        }
        // query params
        if ($tnMaxresults !== null) {
            if('form' === 'form' && is_array($tnMaxresults)) {
                foreach($tnMaxresults as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_maxresults'] = $tnMaxresults;
            }
        }
        // query params
        if ($tnLang !== null) {
            if('form' === 'form' && is_array($tnLang)) {
                foreach($tnLang as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_lang'] = $tnLang;
            }
        }
        // query params
        if ($tnKeyboard !== null) {
            if('form' === 'form' && is_array($tnKeyboard)) {
                foreach($tnKeyboard as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_keyboard'] = $tnKeyboard;
            }
        }
        // query params
        if ($tnParameters !== null) {
            if('form' === 'form' && is_array($tnParameters)) {
                foreach($tnParameters as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters'] = $tnParameters;
            }
        }
        // query params
        if ($tnParametersExcept !== null) {
            if('form' === 'form' && is_array($tnParametersExcept)) {
                foreach($tnParametersExcept as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tn_parameters_except'] = $tnParametersExcept;
            }
        }
        // query params
        if (is_array($tnOptions)) {
            $tnOptions = ObjectSerializer::serializeCollection($tnOptions, 'form', true);
        }
        if ($tnOptions !== null) {
            $queryParams['tn_options'] = $tnOptions;
        }

        // header params
        if ($tWNSource !== null) {
            $headerParams['TWN-Source'] = ObjectSerializer::toHeaderValue($tWNSource);
        }

        // path params
        if ($instancekey !== null) {
            $resourcePath = str_replace(
                '{' . 'instancekey' . '}',
                ObjectSerializer::toPathValue($instancekey),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($this->headerSelector->isJsonMime($headers['Content-Type'])) {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();

        $uri = $this->createUri($operationHost, $resourcePath, $queryParams);

        return $this->createRequest('GET', $uri, $headers, $httpBody);
    }


    /**
     * @param string $method
     * @param string|UriInterface $uri
     * @param array $headers
     * @param string|StreamInterface|null $body
     *
     * @return RequestInterface
     */
    protected function createRequest(string $method, $uri, array $headers = [], $body = null): RequestInterface
    {
        if ($this->requestFactory instanceof RequestFactory) {
            return $this->requestFactory->createRequest(
                $method,
                $uri,
                $headers,
                $body
            );
        }

        if (is_string($body) && '' !== $body && null === $this->streamFactory) {
            throw new \RuntimeException('Cannot create request: A stream factory is required to create a request with a non-empty string body.');
        }

        $request = $this->requestFactory->createRequest($method, $uri);

        foreach ($headers as $key => $value) {
            $request = $request->withHeader($key, $value);
        }

        if (null !== $body && '' !== $body) {
            $request = $request->withBody(
                is_string($body) ? $this->streamFactory->createStream($body) : $body
            );
        }

        return $request;
    }

    private function createUri(
        string $operationHost,
        string $resourcePath,
        array $queryParams
    ): UriInterface {
        $parsedUrl = parse_url($operationHost);

        $host = $parsedUrl['host'] ?? null;
        $scheme = $parsedUrl['scheme'] ?? null;
        $basePath = $parsedUrl['path'] ?? null;
        $port = $parsedUrl['port'] ?? null;
        $user = $parsedUrl['user'] ?? null;
        $password = $parsedUrl['pass'] ?? null;

        $uri = $this->uriFactory->createUri($basePath . $resourcePath)
            ->withHost($host)
            ->withScheme($scheme)
            ->withPort($port)
            ->withQuery(ObjectSerializer::buildQuery($queryParams));

        if ($user) {
            $uri = $uri->withUserInfo($user, $password);
        }

        return $uri;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
