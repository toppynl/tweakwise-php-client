<?php
/**
 * NavigationFacet
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Model;

use \ArrayAccess;
use \Toppy\TweakwiseClient\ObjectSerializer;

/**
 * NavigationFacet Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NavigationFacet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'navigationFacet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hasmoreattributes' => 'bool',
        'facetsettings' => '\Toppy\TweakwiseClient\Model\NavigationFacetSettings',
        'attributes' => '\Toppy\TweakwiseClient\Model\NavigationFacetAttribute[]',
        'clickpoints' => '\Toppy\TweakwiseClient\Model\Clickpoint[]',
        'buckets' => '\Toppy\TweakwiseClient\Model\NavigationFacetBucket[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hasmoreattributes' => null,
        'facetsettings' => null,
        'attributes' => null,
        'clickpoints' => null,
        'buckets' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hasmoreattributes' => true,
        'facetsettings' => false,
        'attributes' => false,
        'clickpoints' => false,
        'buckets' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hasmoreattributes' => 'hasmoreattributes',
        'facetsettings' => 'facetsettings',
        'attributes' => 'attributes',
        'clickpoints' => 'clickpoints',
        'buckets' => 'buckets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hasmoreattributes' => 'setHasmoreattributes',
        'facetsettings' => 'setFacetsettings',
        'attributes' => 'setAttributes',
        'clickpoints' => 'setClickpoints',
        'buckets' => 'setBuckets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hasmoreattributes' => 'getHasmoreattributes',
        'facetsettings' => 'getFacetsettings',
        'attributes' => 'getAttributes',
        'clickpoints' => 'getClickpoints',
        'buckets' => 'getBuckets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('hasmoreattributes', $data ?? [], null);
        $this->setIfExists('facetsettings', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('clickpoints', $data ?? [], null);
        $this->setIfExists('buckets', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hasmoreattributes
     *
     * @return bool|null
     */
    public function getHasmoreattributes()
    {
        return $this->container['hasmoreattributes'];
    }

    /**
     * Sets hasmoreattributes
     *
     * @param bool|null $hasmoreattributes hasmoreattributes
     *
     * @return self
     */
    public function setHasmoreattributes($hasmoreattributes)
    {
        if (is_null($hasmoreattributes)) {
            array_push($this->openAPINullablesSetToNull, 'hasmoreattributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hasmoreattributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hasmoreattributes'] = $hasmoreattributes;

        return $this;
    }

    /**
     * Gets facetsettings
     *
     * @return \Toppy\TweakwiseClient\Model\NavigationFacetSettings|null
     */
    public function getFacetsettings()
    {
        return $this->container['facetsettings'];
    }

    /**
     * Sets facetsettings
     *
     * @param \Toppy\TweakwiseClient\Model\NavigationFacetSettings|null $facetsettings facetsettings
     *
     * @return self
     */
    public function setFacetsettings($facetsettings)
    {
        if (is_null($facetsettings)) {
            throw new \InvalidArgumentException('non-nullable facetsettings cannot be null');
        }
        $this->container['facetsettings'] = $facetsettings;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Toppy\TweakwiseClient\Model\NavigationFacetAttribute[]|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Toppy\TweakwiseClient\Model\NavigationFacetAttribute[]|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets clickpoints
     *
     * @return \Toppy\TweakwiseClient\Model\Clickpoint[]|null
     */
    public function getClickpoints()
    {
        return $this->container['clickpoints'];
    }

    /**
     * Sets clickpoints
     *
     * @param \Toppy\TweakwiseClient\Model\Clickpoint[]|null $clickpoints clickpoints
     *
     * @return self
     */
    public function setClickpoints($clickpoints)
    {
        if (is_null($clickpoints)) {
            throw new \InvalidArgumentException('non-nullable clickpoints cannot be null');
        }
        $this->container['clickpoints'] = $clickpoints;

        return $this;
    }

    /**
     * Gets buckets
     *
     * @return \Toppy\TweakwiseClient\Model\NavigationFacetBucket[]|null
     */
    public function getBuckets()
    {
        return $this->container['buckets'];
    }

    /**
     * Sets buckets
     *
     * @param \Toppy\TweakwiseClient\Model\NavigationFacetBucket[]|null $buckets buckets
     *
     * @return self
     */
    public function setBuckets($buckets)
    {
        if (is_null($buckets)) {
            throw new \InvalidArgumentException('non-nullable buckets cannot be null');
        }
        $this->container['buckets'] = $buckets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


