<?php
/**
 * NavigationFacetSettings
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Model;

use \ArrayAccess;
use \Toppy\TweakwiseClient\ObjectSerializer;

/**
 * NavigationFacetSettings Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NavigationFacetSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'navigationFacetSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'facetid' => 'int',
        'isvisible' => 'bool',
        'attributename' => 'string',
        'urlkey' => 'string',
        'title' => 'string',
        'iscollapsible' => 'bool',
        'iscollapsed' => 'bool',
        'nrofshownattributes' => 'int',
        'expandtext' => 'string',
        'collapsetext' => 'string',
        'ismultiselect' => 'bool',
        'showselectedfirst' => 'bool',
        'multiselectlogic' => 'string',
        'selectiontype' => 'string',
        'nrofcolumns' => 'int',
        'isnrofresultsvisible' => 'bool',
        'isinfovisible' => 'bool',
        'containsclickpoints' => 'bool',
        'containsbuckets' => 'bool',
        'infotext' => 'string',
        'source' => 'string',
        'issearchable' => 'bool',
        'searchplaceholder' => 'string',
        'searchnoresultstext' => 'string',
        'prefix' => 'string',
        'postfix' => 'string',
        'cssclass' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'facetid' => 'int32',
        'isvisible' => null,
        'attributename' => null,
        'urlkey' => null,
        'title' => null,
        'iscollapsible' => null,
        'iscollapsed' => null,
        'nrofshownattributes' => 'int32',
        'expandtext' => null,
        'collapsetext' => null,
        'ismultiselect' => null,
        'showselectedfirst' => null,
        'multiselectlogic' => null,
        'selectiontype' => null,
        'nrofcolumns' => 'int32',
        'isnrofresultsvisible' => null,
        'isinfovisible' => null,
        'containsclickpoints' => null,
        'containsbuckets' => null,
        'infotext' => null,
        'source' => null,
        'issearchable' => null,
        'searchplaceholder' => null,
        'searchnoresultstext' => null,
        'prefix' => null,
        'postfix' => null,
        'cssclass' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'facetid' => false,
        'isvisible' => false,
        'attributename' => false,
        'urlkey' => false,
        'title' => false,
        'iscollapsible' => false,
        'iscollapsed' => false,
        'nrofshownattributes' => false,
        'expandtext' => false,
        'collapsetext' => false,
        'ismultiselect' => false,
        'showselectedfirst' => false,
        'multiselectlogic' => false,
        'selectiontype' => false,
        'nrofcolumns' => false,
        'isnrofresultsvisible' => false,
        'isinfovisible' => false,
        'containsclickpoints' => false,
        'containsbuckets' => false,
        'infotext' => false,
        'source' => false,
        'issearchable' => false,
        'searchplaceholder' => false,
        'searchnoresultstext' => false,
        'prefix' => false,
        'postfix' => false,
        'cssclass' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'facetid' => 'facetid',
        'isvisible' => 'isvisible',
        'attributename' => 'attributename',
        'urlkey' => 'urlkey',
        'title' => 'title',
        'iscollapsible' => 'iscollapsible',
        'iscollapsed' => 'iscollapsed',
        'nrofshownattributes' => 'nrofshownattributes',
        'expandtext' => 'expandtext',
        'collapsetext' => 'collapsetext',
        'ismultiselect' => 'ismultiselect',
        'showselectedfirst' => 'showselectedfirst',
        'multiselectlogic' => 'multiselectlogic',
        'selectiontype' => 'selectiontype',
        'nrofcolumns' => 'nrofcolumns',
        'isnrofresultsvisible' => 'isnrofresultsvisible',
        'isinfovisible' => 'isinfovisible',
        'containsclickpoints' => 'containsclickpoints',
        'containsbuckets' => 'containsbuckets',
        'infotext' => 'infotext',
        'source' => 'source',
        'issearchable' => 'issearchable',
        'searchplaceholder' => 'searchplaceholder',
        'searchnoresultstext' => 'searchnoresultstext',
        'prefix' => 'prefix',
        'postfix' => 'postfix',
        'cssclass' => 'cssclass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'facetid' => 'setFacetid',
        'isvisible' => 'setIsvisible',
        'attributename' => 'setAttributename',
        'urlkey' => 'setUrlkey',
        'title' => 'setTitle',
        'iscollapsible' => 'setIscollapsible',
        'iscollapsed' => 'setIscollapsed',
        'nrofshownattributes' => 'setNrofshownattributes',
        'expandtext' => 'setExpandtext',
        'collapsetext' => 'setCollapsetext',
        'ismultiselect' => 'setIsmultiselect',
        'showselectedfirst' => 'setShowselectedfirst',
        'multiselectlogic' => 'setMultiselectlogic',
        'selectiontype' => 'setSelectiontype',
        'nrofcolumns' => 'setNrofcolumns',
        'isnrofresultsvisible' => 'setIsnrofresultsvisible',
        'isinfovisible' => 'setIsinfovisible',
        'containsclickpoints' => 'setContainsclickpoints',
        'containsbuckets' => 'setContainsbuckets',
        'infotext' => 'setInfotext',
        'source' => 'setSource',
        'issearchable' => 'setIssearchable',
        'searchplaceholder' => 'setSearchplaceholder',
        'searchnoresultstext' => 'setSearchnoresultstext',
        'prefix' => 'setPrefix',
        'postfix' => 'setPostfix',
        'cssclass' => 'setCssclass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'facetid' => 'getFacetid',
        'isvisible' => 'getIsvisible',
        'attributename' => 'getAttributename',
        'urlkey' => 'getUrlkey',
        'title' => 'getTitle',
        'iscollapsible' => 'getIscollapsible',
        'iscollapsed' => 'getIscollapsed',
        'nrofshownattributes' => 'getNrofshownattributes',
        'expandtext' => 'getExpandtext',
        'collapsetext' => 'getCollapsetext',
        'ismultiselect' => 'getIsmultiselect',
        'showselectedfirst' => 'getShowselectedfirst',
        'multiselectlogic' => 'getMultiselectlogic',
        'selectiontype' => 'getSelectiontype',
        'nrofcolumns' => 'getNrofcolumns',
        'isnrofresultsvisible' => 'getIsnrofresultsvisible',
        'isinfovisible' => 'getIsinfovisible',
        'containsclickpoints' => 'getContainsclickpoints',
        'containsbuckets' => 'getContainsbuckets',
        'infotext' => 'getInfotext',
        'source' => 'getSource',
        'issearchable' => 'getIssearchable',
        'searchplaceholder' => 'getSearchplaceholder',
        'searchnoresultstext' => 'getSearchnoresultstext',
        'prefix' => 'getPrefix',
        'postfix' => 'getPostfix',
        'cssclass' => 'getCssclass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('facetid', $data ?? [], null);
        $this->setIfExists('isvisible', $data ?? [], null);
        $this->setIfExists('attributename', $data ?? [], null);
        $this->setIfExists('urlkey', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('iscollapsible', $data ?? [], null);
        $this->setIfExists('iscollapsed', $data ?? [], null);
        $this->setIfExists('nrofshownattributes', $data ?? [], null);
        $this->setIfExists('expandtext', $data ?? [], null);
        $this->setIfExists('collapsetext', $data ?? [], null);
        $this->setIfExists('ismultiselect', $data ?? [], null);
        $this->setIfExists('showselectedfirst', $data ?? [], null);
        $this->setIfExists('multiselectlogic', $data ?? [], null);
        $this->setIfExists('selectiontype', $data ?? [], null);
        $this->setIfExists('nrofcolumns', $data ?? [], null);
        $this->setIfExists('isnrofresultsvisible', $data ?? [], null);
        $this->setIfExists('isinfovisible', $data ?? [], null);
        $this->setIfExists('containsclickpoints', $data ?? [], null);
        $this->setIfExists('containsbuckets', $data ?? [], null);
        $this->setIfExists('infotext', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('issearchable', $data ?? [], null);
        $this->setIfExists('searchplaceholder', $data ?? [], null);
        $this->setIfExists('searchnoresultstext', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('postfix', $data ?? [], null);
        $this->setIfExists('cssclass', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets facetid
     *
     * @return int|null
     */
    public function getFacetid()
    {
        return $this->container['facetid'];
    }

    /**
     * Sets facetid
     *
     * @param int|null $facetid Facet id
     *
     * @return self
     */
    public function setFacetid($facetid)
    {
        if (is_null($facetid)) {
            throw new \InvalidArgumentException('non-nullable facetid cannot be null');
        }
        $this->container['facetid'] = $facetid;

        return $this;
    }

    /**
     * Gets isvisible
     *
     * @return bool|null
     */
    public function getIsvisible()
    {
        return $this->container['isvisible'];
    }

    /**
     * Sets isvisible
     *
     * @param bool|null $isvisible true/false to indicate if facet is visible
     *
     * @return self
     */
    public function setIsvisible($isvisible)
    {
        if (is_null($isvisible)) {
            throw new \InvalidArgumentException('non-nullable isvisible cannot be null');
        }
        $this->container['isvisible'] = $isvisible;

        return $this;
    }

    /**
     * Gets attributename
     *
     * @return string|null
     */
    public function getAttributename()
    {
        return $this->container['attributename'];
    }

    /**
     * Sets attributename
     *
     * @param string|null $attributename Name of the attribute corresponding to the facet
     *
     * @return self
     */
    public function setAttributename($attributename)
    {
        if (is_null($attributename)) {
            throw new \InvalidArgumentException('non-nullable attributename cannot be null');
        }
        $this->container['attributename'] = $attributename;

        return $this;
    }

    /**
     * Gets urlkey
     *
     * @return string|null
     */
    public function getUrlkey()
    {
        return $this->container['urlkey'];
    }

    /**
     * Sets urlkey
     *
     * @param string|null $urlkey URL Key of facet
     *
     * @return self
     */
    public function setUrlkey($urlkey)
    {
        if (is_null($urlkey)) {
            throw new \InvalidArgumentException('non-nullable urlkey cannot be null');
        }
        $this->container['urlkey'] = $urlkey;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of facet
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets iscollapsible
     *
     * @return bool|null
     */
    public function getIscollapsible()
    {
        return $this->container['iscollapsible'];
    }

    /**
     * Sets iscollapsible
     *
     * @param bool|null $iscollapsible true/false to indicate if facet is collapsible
     *
     * @return self
     */
    public function setIscollapsible($iscollapsible)
    {
        if (is_null($iscollapsible)) {
            throw new \InvalidArgumentException('non-nullable iscollapsible cannot be null');
        }
        $this->container['iscollapsible'] = $iscollapsible;

        return $this;
    }

    /**
     * Gets iscollapsed
     *
     * @return bool|null
     */
    public function getIscollapsed()
    {
        return $this->container['iscollapsed'];
    }

    /**
     * Sets iscollapsed
     *
     * @param bool|null $iscollapsed true/false to indicate if facet is collapsed
     *
     * @return self
     */
    public function setIscollapsed($iscollapsed)
    {
        if (is_null($iscollapsed)) {
            throw new \InvalidArgumentException('non-nullable iscollapsed cannot be null');
        }
        $this->container['iscollapsed'] = $iscollapsed;

        return $this;
    }

    /**
     * Gets nrofshownattributes
     *
     * @return int|null
     */
    public function getNrofshownattributes()
    {
        return $this->container['nrofshownattributes'];
    }

    /**
     * Sets nrofshownattributes
     *
     * @param int|null $nrofshownattributes Number of shown attributes
     *
     * @return self
     */
    public function setNrofshownattributes($nrofshownattributes)
    {
        if (is_null($nrofshownattributes)) {
            throw new \InvalidArgumentException('non-nullable nrofshownattributes cannot be null');
        }
        $this->container['nrofshownattributes'] = $nrofshownattributes;

        return $this;
    }

    /**
     * Gets expandtext
     *
     * @return string|null
     */
    public function getExpandtext()
    {
        return $this->container['expandtext'];
    }

    /**
     * Sets expandtext
     *
     * @param string|null $expandtext Text for the button or link that expands the facet
     *
     * @return self
     */
    public function setExpandtext($expandtext)
    {
        if (is_null($expandtext)) {
            throw new \InvalidArgumentException('non-nullable expandtext cannot be null');
        }
        $this->container['expandtext'] = $expandtext;

        return $this;
    }

    /**
     * Gets collapsetext
     *
     * @return string|null
     */
    public function getCollapsetext()
    {
        return $this->container['collapsetext'];
    }

    /**
     * Sets collapsetext
     *
     * @param string|null $collapsetext Text for the button or link that collapses the facet
     *
     * @return self
     */
    public function setCollapsetext($collapsetext)
    {
        if (is_null($collapsetext)) {
            throw new \InvalidArgumentException('non-nullable collapsetext cannot be null');
        }
        $this->container['collapsetext'] = $collapsetext;

        return $this;
    }

    /**
     * Gets ismultiselect
     *
     * @return bool|null
     */
    public function getIsmultiselect()
    {
        return $this->container['ismultiselect'];
    }

    /**
     * Sets ismultiselect
     *
     * @param bool|null $ismultiselect true/false to indicate if facet is multiselectable
     *
     * @return self
     */
    public function setIsmultiselect($ismultiselect)
    {
        if (is_null($ismultiselect)) {
            throw new \InvalidArgumentException('non-nullable ismultiselect cannot be null');
        }
        $this->container['ismultiselect'] = $ismultiselect;

        return $this;
    }

    /**
     * Gets showselectedfirst
     *
     * @return bool|null
     */
    public function getShowselectedfirst()
    {
        return $this->container['showselectedfirst'];
    }

    /**
     * Sets showselectedfirst
     *
     * @param bool|null $showselectedfirst true/false to indicate if selected values are at the top of the facet
     *
     * @return self
     */
    public function setShowselectedfirst($showselectedfirst)
    {
        if (is_null($showselectedfirst)) {
            throw new \InvalidArgumentException('non-nullable showselectedfirst cannot be null');
        }
        $this->container['showselectedfirst'] = $showselectedfirst;

        return $this;
    }

    /**
     * Gets multiselectlogic
     *
     * @return string|null
     */
    public function getMultiselectlogic()
    {
        return $this->container['multiselectlogic'];
    }

    /**
     * Sets multiselectlogic
     *
     * @param string|null $multiselectlogic Indicates whether conjunction logic (and) or disjunction logic (or) is used when selecting multiple values in a multiselect facet
     *
     * @return self
     */
    public function setMultiselectlogic($multiselectlogic)
    {
        if (is_null($multiselectlogic)) {
            throw new \InvalidArgumentException('non-nullable multiselectlogic cannot be null');
        }
        $this->container['multiselectlogic'] = $multiselectlogic;

        return $this;
    }

    /**
     * Gets selectiontype
     *
     * @return string|null
     */
    public function getSelectiontype()
    {
        return $this->container['selectiontype'];
    }

    /**
     * Sets selectiontype
     *
     * @param string|null $selectiontype Type of selection for this facet. This could be checkbox, slider, tree or link
     *
     * @return self
     */
    public function setSelectiontype($selectiontype)
    {
        if (is_null($selectiontype)) {
            throw new \InvalidArgumentException('non-nullable selectiontype cannot be null');
        }
        $this->container['selectiontype'] = $selectiontype;

        return $this;
    }

    /**
     * Gets nrofcolumns
     *
     * @return int|null
     */
    public function getNrofcolumns()
    {
        return $this->container['nrofcolumns'];
    }

    /**
     * Sets nrofcolumns
     *
     * @param int|null $nrofcolumns This field is deprecated and only in the response for backwards compatibility
     *
     * @return self
     */
    public function setNrofcolumns($nrofcolumns)
    {
        if (is_null($nrofcolumns)) {
            throw new \InvalidArgumentException('non-nullable nrofcolumns cannot be null');
        }
        $this->container['nrofcolumns'] = $nrofcolumns;

        return $this;
    }

    /**
     * Gets isnrofresultsvisible
     *
     * @return bool|null
     */
    public function getIsnrofresultsvisible()
    {
        return $this->container['isnrofresultsvisible'];
    }

    /**
     * Sets isnrofresultsvisible
     *
     * @param bool|null $isnrofresultsvisible true/false to indicate if number of resulting items is visible
     *
     * @return self
     */
    public function setIsnrofresultsvisible($isnrofresultsvisible)
    {
        if (is_null($isnrofresultsvisible)) {
            throw new \InvalidArgumentException('non-nullable isnrofresultsvisible cannot be null');
        }
        $this->container['isnrofresultsvisible'] = $isnrofresultsvisible;

        return $this;
    }

    /**
     * Gets isinfovisible
     *
     * @return bool|null
     */
    public function getIsinfovisible()
    {
        return $this->container['isinfovisible'];
    }

    /**
     * Sets isinfovisible
     *
     * @param bool|null $isinfovisible true/false to indicate if info text should be displayed
     *
     * @return self
     */
    public function setIsinfovisible($isinfovisible)
    {
        if (is_null($isinfovisible)) {
            throw new \InvalidArgumentException('non-nullable isinfovisible cannot be null');
        }
        $this->container['isinfovisible'] = $isinfovisible;

        return $this;
    }

    /**
     * Gets containsclickpoints
     *
     * @return bool|null
     */
    public function getContainsclickpoints()
    {
        return $this->container['containsclickpoints'];
    }

    /**
     * Sets containsclickpoints
     *
     * @param bool|null $containsclickpoints true/false to indicate if slider is type clickpoint
     *
     * @return self
     */
    public function setContainsclickpoints($containsclickpoints)
    {
        if (is_null($containsclickpoints)) {
            throw new \InvalidArgumentException('non-nullable containsclickpoints cannot be null');
        }
        $this->container['containsclickpoints'] = $containsclickpoints;

        return $this;
    }

    /**
     * Gets containsbuckets
     *
     * @return bool|null
     */
    public function getContainsbuckets()
    {
        return $this->container['containsbuckets'];
    }

    /**
     * Sets containsbuckets
     *
     * @param bool|null $containsbuckets true/false to indicate if slider is type bucket
     *
     * @return self
     */
    public function setContainsbuckets($containsbuckets)
    {
        if (is_null($containsbuckets)) {
            throw new \InvalidArgumentException('non-nullable containsbuckets cannot be null');
        }
        $this->container['containsbuckets'] = $containsbuckets;

        return $this;
    }

    /**
     * Gets infotext
     *
     * @return string|null
     */
    public function getInfotext()
    {
        return $this->container['infotext'];
    }

    /**
     * Sets infotext
     *
     * @param string|null $infotext Facet information text
     *
     * @return self
     */
    public function setInfotext($infotext)
    {
        if (is_null($infotext)) {
            throw new \InvalidArgumentException('non-nullable infotext cannot be null');
        }
        $this->container['infotext'] = $infotext;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source of the attribute corresponding to the facet
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets issearchable
     *
     * @return bool|null
     */
    public function getIssearchable()
    {
        return $this->container['issearchable'];
    }

    /**
     * Sets issearchable
     *
     * @param bool|null $issearchable true/false to indicate if search is available within the facet
     *
     * @return self
     */
    public function setIssearchable($issearchable)
    {
        if (is_null($issearchable)) {
            throw new \InvalidArgumentException('non-nullable issearchable cannot be null');
        }
        $this->container['issearchable'] = $issearchable;

        return $this;
    }

    /**
     * Gets searchplaceholder
     *
     * @return string|null
     */
    public function getSearchplaceholder()
    {
        return $this->container['searchplaceholder'];
    }

    /**
     * Sets searchplaceholder
     *
     * @param string|null $searchplaceholder Placeholder text for the facet search
     *
     * @return self
     */
    public function setSearchplaceholder($searchplaceholder)
    {
        if (is_null($searchplaceholder)) {
            throw new \InvalidArgumentException('non-nullable searchplaceholder cannot be null');
        }
        $this->container['searchplaceholder'] = $searchplaceholder;

        return $this;
    }

    /**
     * Gets searchnoresultstext
     *
     * @return string|null
     */
    public function getSearchnoresultstext()
    {
        return $this->container['searchnoresultstext'];
    }

    /**
     * Sets searchnoresultstext
     *
     * @param string|null $searchnoresultstext Text for when there are no results for the facet search
     *
     * @return self
     */
    public function setSearchnoresultstext($searchnoresultstext)
    {
        if (is_null($searchnoresultstext)) {
            throw new \InvalidArgumentException('non-nullable searchnoresultstext cannot be null');
        }
        $this->container['searchnoresultstext'] = $searchnoresultstext;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix Attributes prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets postfix
     *
     * @return string|null
     */
    public function getPostfix()
    {
        return $this->container['postfix'];
    }

    /**
     * Sets postfix
     *
     * @param string|null $postfix Attributes postfix
     *
     * @return self
     */
    public function setPostfix($postfix)
    {
        if (is_null($postfix)) {
            throw new \InvalidArgumentException('non-nullable postfix cannot be null');
        }
        $this->container['postfix'] = $postfix;

        return $this;
    }

    /**
     * Gets cssclass
     *
     * @return string|null
     */
    public function getCssclass()
    {
        return $this->container['cssclass'];
    }

    /**
     * Sets cssclass
     *
     * @param string|null $cssclass Attributes css class
     *
     * @return self
     */
    public function setCssclass($cssclass)
    {
        if (is_null($cssclass)) {
            throw new \InvalidArgumentException('non-nullable cssclass cannot be null');
        }
        $this->container['cssclass'] = $cssclass;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


