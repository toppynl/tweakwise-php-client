<?php
/**
 * FilterWizardQuestion
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Model;

use \ArrayAccess;
use \Toppy\TweakwiseClient\ObjectSerializer;

/**
 * FilterWizardQuestion Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FilterWizardQuestion implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'filterWizardQuestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'questionid' => 'int',
        'question' => 'string',
        'explanation' => 'string',
        'ismultiselect' => 'bool',
        'imageurl' => 'string',
        'current' => 'bool',
        'skippable' => 'bool',
        'skiplabel' => 'string',
        'attribute' => '\Toppy\TweakwiseClient\Model\FilterWizardAttribute',
        'answers' => '\Toppy\TweakwiseClient\Model\FilterWizardAnswer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'questionid' => 'int32',
        'question' => null,
        'explanation' => null,
        'ismultiselect' => null,
        'imageurl' => null,
        'current' => null,
        'skippable' => null,
        'skiplabel' => null,
        'attribute' => null,
        'answers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'questionid' => false,
        'question' => false,
        'explanation' => false,
        'ismultiselect' => false,
        'imageurl' => false,
        'current' => false,
        'skippable' => false,
        'skiplabel' => false,
        'attribute' => false,
        'answers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'questionid' => 'questionid',
        'question' => 'question',
        'explanation' => 'explanation',
        'ismultiselect' => 'ismultiselect',
        'imageurl' => 'imageurl',
        'current' => 'current',
        'skippable' => 'skippable',
        'skiplabel' => 'skiplabel',
        'attribute' => 'attribute',
        'answers' => 'answers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'questionid' => 'setQuestionid',
        'question' => 'setQuestion',
        'explanation' => 'setExplanation',
        'ismultiselect' => 'setIsmultiselect',
        'imageurl' => 'setImageurl',
        'current' => 'setCurrent',
        'skippable' => 'setSkippable',
        'skiplabel' => 'setSkiplabel',
        'attribute' => 'setAttribute',
        'answers' => 'setAnswers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'questionid' => 'getQuestionid',
        'question' => 'getQuestion',
        'explanation' => 'getExplanation',
        'ismultiselect' => 'getIsmultiselect',
        'imageurl' => 'getImageurl',
        'current' => 'getCurrent',
        'skippable' => 'getSkippable',
        'skiplabel' => 'getSkiplabel',
        'attribute' => 'getAttribute',
        'answers' => 'getAnswers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('questionid', $data ?? [], null);
        $this->setIfExists('question', $data ?? [], null);
        $this->setIfExists('explanation', $data ?? [], null);
        $this->setIfExists('ismultiselect', $data ?? [], null);
        $this->setIfExists('imageurl', $data ?? [], null);
        $this->setIfExists('current', $data ?? [], null);
        $this->setIfExists('skippable', $data ?? [], null);
        $this->setIfExists('skiplabel', $data ?? [], null);
        $this->setIfExists('attribute', $data ?? [], null);
        $this->setIfExists('answers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets questionid
     *
     * @return int|null
     */
    public function getQuestionid()
    {
        return $this->container['questionid'];
    }

    /**
     * Sets questionid
     *
     * @param int|null $questionid ID of the question
     *
     * @return self
     */
    public function setQuestionid($questionid)
    {
        if (is_null($questionid)) {
            throw new \InvalidArgumentException('non-nullable questionid cannot be null');
        }
        $this->container['questionid'] = $questionid;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string|null
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string|null $question Text of the question
     *
     * @return self
     */
    public function setQuestion($question)
    {
        if (is_null($question)) {
            throw new \InvalidArgumentException('non-nullable question cannot be null');
        }
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets explanation
     *
     * @return string|null
     */
    public function getExplanation()
    {
        return $this->container['explanation'];
    }

    /**
     * Sets explanation
     *
     * @param string|null $explanation Explanation of the question
     *
     * @return self
     */
    public function setExplanation($explanation)
    {
        if (is_null($explanation)) {
            throw new \InvalidArgumentException('non-nullable explanation cannot be null');
        }
        $this->container['explanation'] = $explanation;

        return $this;
    }

    /**
     * Gets ismultiselect
     *
     * @return bool|null
     */
    public function getIsmultiselect()
    {
        return $this->container['ismultiselect'];
    }

    /**
     * Sets ismultiselect
     *
     * @param bool|null $ismultiselect Indicates if multiple answers can be selected
     *
     * @return self
     */
    public function setIsmultiselect($ismultiselect)
    {
        if (is_null($ismultiselect)) {
            throw new \InvalidArgumentException('non-nullable ismultiselect cannot be null');
        }
        $this->container['ismultiselect'] = $ismultiselect;

        return $this;
    }

    /**
     * Gets imageurl
     *
     * @return string|null
     */
    public function getImageurl()
    {
        return $this->container['imageurl'];
    }

    /**
     * Sets imageurl
     *
     * @param string|null $imageurl URL of the image
     *
     * @return self
     */
    public function setImageurl($imageurl)
    {
        if (is_null($imageurl)) {
            throw new \InvalidArgumentException('non-nullable imageurl cannot be null');
        }
        $this->container['imageurl'] = $imageurl;

        return $this;
    }

    /**
     * Gets current
     *
     * @return bool|null
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param bool|null $current Indicates if this is the current question
     *
     * @return self
     */
    public function setCurrent($current)
    {
        if (is_null($current)) {
            throw new \InvalidArgumentException('non-nullable current cannot be null');
        }
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets skippable
     *
     * @return bool|null
     */
    public function getSkippable()
    {
        return $this->container['skippable'];
    }

    /**
     * Sets skippable
     *
     * @param bool|null $skippable Indicates if this question can be skipped
     *
     * @return self
     */
    public function setSkippable($skippable)
    {
        if (is_null($skippable)) {
            throw new \InvalidArgumentException('non-nullable skippable cannot be null');
        }
        $this->container['skippable'] = $skippable;

        return $this;
    }

    /**
     * Gets skiplabel
     *
     * @return string|null
     */
    public function getSkiplabel()
    {
        return $this->container['skiplabel'];
    }

    /**
     * Sets skiplabel
     *
     * @param string|null $skiplabel Label for the skip button
     *
     * @return self
     */
    public function setSkiplabel($skiplabel)
    {
        if (is_null($skiplabel)) {
            throw new \InvalidArgumentException('non-nullable skiplabel cannot be null');
        }
        $this->container['skiplabel'] = $skiplabel;

        return $this;
    }

    /**
     * Gets attribute
     *
     * @return \Toppy\TweakwiseClient\Model\FilterWizardAttribute|null
     */
    public function getAttribute()
    {
        return $this->container['attribute'];
    }

    /**
     * Sets attribute
     *
     * @param \Toppy\TweakwiseClient\Model\FilterWizardAttribute|null $attribute attribute
     *
     * @return self
     */
    public function setAttribute($attribute)
    {
        if (is_null($attribute)) {
            throw new \InvalidArgumentException('non-nullable attribute cannot be null');
        }
        $this->container['attribute'] = $attribute;

        return $this;
    }

    /**
     * Gets answers
     *
     * @return \Toppy\TweakwiseClient\Model\FilterWizardAnswer[]|null
     */
    public function getAnswers()
    {
        return $this->container['answers'];
    }

    /**
     * Sets answers
     *
     * @param \Toppy\TweakwiseClient\Model\FilterWizardAnswer[]|null $answers List of answers
     *
     * @return self
     */
    public function setAnswers($answers)
    {
        if (is_null($answers)) {
            throw new \InvalidArgumentException('non-nullable answers cannot be null');
        }
        $this->container['answers'] = $answers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


