<?php
/**
 * NavigationFacetAttribute
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Model;

use \ArrayAccess;
use \Toppy\TweakwiseClient\ObjectSerializer;

/**
 * NavigationFacetAttribute Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NavigationFacetAttribute implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'navigationFacetAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'alternatesortorder' => 'int',
        'isselected' => 'bool',
        'nrofresults' => 'int',
        'attributeid' => 'int',
        'url' => 'string',
        'link' => 'string',
        'imagetag' => 'string',
        'children' => '\Toppy\TweakwiseClient\Model\NavigationFacetAttribute[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'alternatesortorder' => 'int32',
        'isselected' => null,
        'nrofresults' => 'int32',
        'attributeid' => 'int32',
        'url' => null,
        'link' => null,
        'imagetag' => null,
        'children' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
        'alternatesortorder' => true,
        'isselected' => false,
        'nrofresults' => false,
        'attributeid' => true,
        'url' => false,
        'link' => false,
        'imagetag' => false,
        'children' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'alternatesortorder' => 'alternatesortorder',
        'isselected' => 'isselected',
        'nrofresults' => 'nrofresults',
        'attributeid' => 'attributeid',
        'url' => 'url',
        'link' => 'link',
        'imagetag' => 'imagetag',
        'children' => 'children'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'alternatesortorder' => 'setAlternatesortorder',
        'isselected' => 'setIsselected',
        'nrofresults' => 'setNrofresults',
        'attributeid' => 'setAttributeid',
        'url' => 'setUrl',
        'link' => 'setLink',
        'imagetag' => 'setImagetag',
        'children' => 'setChildren'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'alternatesortorder' => 'getAlternatesortorder',
        'isselected' => 'getIsselected',
        'nrofresults' => 'getNrofresults',
        'attributeid' => 'getAttributeid',
        'url' => 'getUrl',
        'link' => 'getLink',
        'imagetag' => 'getImagetag',
        'children' => 'getChildren'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('alternatesortorder', $data ?? [], null);
        $this->setIfExists('isselected', $data ?? [], null);
        $this->setIfExists('nrofresults', $data ?? [], null);
        $this->setIfExists('attributeid', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('imagetag', $data ?? [], null);
        $this->setIfExists('children', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the attribute
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets alternatesortorder
     *
     * @return int|null
     */
    public function getAlternatesortorder()
    {
        return $this->container['alternatesortorder'];
    }

    /**
     * Sets alternatesortorder
     *
     * @param int|null $alternatesortorder Alternate sort order
     *
     * @return self
     */
    public function setAlternatesortorder($alternatesortorder)
    {
        if (is_null($alternatesortorder)) {
            array_push($this->openAPINullablesSetToNull, 'alternatesortorder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternatesortorder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alternatesortorder'] = $alternatesortorder;

        return $this;
    }

    /**
     * Gets isselected
     *
     * @return bool|null
     */
    public function getIsselected()
    {
        return $this->container['isselected'];
    }

    /**
     * Sets isselected
     *
     * @param bool|null $isselected true/false to indicate if attribute is selected
     *
     * @return self
     */
    public function setIsselected($isselected)
    {
        if (is_null($isselected)) {
            throw new \InvalidArgumentException('non-nullable isselected cannot be null');
        }
        $this->container['isselected'] = $isselected;

        return $this;
    }

    /**
     * Gets nrofresults
     *
     * @return int|null
     */
    public function getNrofresults()
    {
        return $this->container['nrofresults'];
    }

    /**
     * Sets nrofresults
     *
     * @param int|null $nrofresults Resulting number of items when attribute is selected
     *
     * @return self
     */
    public function setNrofresults($nrofresults)
    {
        if (is_null($nrofresults)) {
            throw new \InvalidArgumentException('non-nullable nrofresults cannot be null');
        }
        $this->container['nrofresults'] = $nrofresults;

        return $this;
    }

    /**
     * Gets attributeid
     *
     * @return int|null
     */
    public function getAttributeid()
    {
        return $this->container['attributeid'];
    }

    /**
     * Sets attributeid
     *
     * @param int|null $attributeid Attribute id
     *
     * @return self
     */
    public function setAttributeid($attributeid)
    {
        if (is_null($attributeid)) {
            array_push($this->openAPINullablesSetToNull, 'attributeid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributeid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attributeid'] = $attributeid;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Complete navigation url after selecting or deselecting value
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link Optional landingpage url to which the user will navigate after selecting this value, this takes precedence over the url property
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets imagetag
     *
     * @return string|null
     */
    public function getImagetag()
    {
        return $this->container['imagetag'];
    }

    /**
     * Sets imagetag
     *
     * @param string|null $imagetag Tag of the image
     *
     * @return self
     */
    public function setImagetag($imagetag)
    {
        if (is_null($imagetag)) {
            throw new \InvalidArgumentException('non-nullable imagetag cannot be null');
        }
        $this->container['imagetag'] = $imagetag;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \Toppy\TweakwiseClient\Model\NavigationFacetAttribute[]|null
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \Toppy\TweakwiseClient\Model\NavigationFacetAttribute[]|null $children Recursive list of child attributes
     *
     * @return self
     */
    public function setChildren($children)
    {
        if (is_null($children)) {
            throw new \InvalidArgumentException('non-nullable children cannot be null');
        }
        $this->container['children'] = $children;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


