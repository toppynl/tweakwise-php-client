<?php
/**
 * FilterWizardAnswer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Model;

use \ArrayAccess;
use \Toppy\TweakwiseClient\ObjectSerializer;

/**
 * FilterWizardAnswer Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FilterWizardAnswer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'filterWizardAnswer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'answerid' => 'int',
        'answer' => 'string',
        'caption' => 'string',
        'summary' => 'string',
        'imageurl' => 'string',
        'count' => 'int',
        'isselected' => 'bool',
        'nextquestionid' => 'int',
        'attributevalues' => '\Toppy\TweakwiseClient\Model\FilterWizardAttributeValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'answerid' => 'int32',
        'answer' => null,
        'caption' => null,
        'summary' => null,
        'imageurl' => null,
        'count' => 'int32',
        'isselected' => null,
        'nextquestionid' => 'int32',
        'attributevalues' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'answerid' => false,
        'answer' => false,
        'caption' => false,
        'summary' => false,
        'imageurl' => false,
        'count' => false,
        'isselected' => false,
        'nextquestionid' => true,
        'attributevalues' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answerid' => 'answerid',
        'answer' => 'answer',
        'caption' => 'caption',
        'summary' => 'summary',
        'imageurl' => 'imageurl',
        'count' => 'count',
        'isselected' => 'isselected',
        'nextquestionid' => 'nextquestionid',
        'attributevalues' => 'attributevalues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answerid' => 'setAnswerid',
        'answer' => 'setAnswer',
        'caption' => 'setCaption',
        'summary' => 'setSummary',
        'imageurl' => 'setImageurl',
        'count' => 'setCount',
        'isselected' => 'setIsselected',
        'nextquestionid' => 'setNextquestionid',
        'attributevalues' => 'setAttributevalues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answerid' => 'getAnswerid',
        'answer' => 'getAnswer',
        'caption' => 'getCaption',
        'summary' => 'getSummary',
        'imageurl' => 'getImageurl',
        'count' => 'getCount',
        'isselected' => 'getIsselected',
        'nextquestionid' => 'getNextquestionid',
        'attributevalues' => 'getAttributevalues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('answerid', $data ?? [], null);
        $this->setIfExists('answer', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('imageurl', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('isselected', $data ?? [], null);
        $this->setIfExists('nextquestionid', $data ?? [], null);
        $this->setIfExists('attributevalues', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answerid
     *
     * @return int|null
     */
    public function getAnswerid()
    {
        return $this->container['answerid'];
    }

    /**
     * Sets answerid
     *
     * @param int|null $answerid ID of the answer
     *
     * @return self
     */
    public function setAnswerid($answerid)
    {
        if (is_null($answerid)) {
            throw new \InvalidArgumentException('non-nullable answerid cannot be null');
        }
        $this->container['answerid'] = $answerid;

        return $this;
    }

    /**
     * Gets answer
     *
     * @return string|null
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param string|null $answer Text of the answer
     *
     * @return self
     */
    public function setAnswer($answer)
    {
        if (is_null($answer)) {
            throw new \InvalidArgumentException('non-nullable answer cannot be null');
        }
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Caption of the answer
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary Summary of the answer
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets imageurl
     *
     * @return string|null
     */
    public function getImageurl()
    {
        return $this->container['imageurl'];
    }

    /**
     * Sets imageurl
     *
     * @param string|null $imageurl URL of the image
     *
     * @return self
     */
    public function setImageurl($imageurl)
    {
        if (is_null($imageurl)) {
            throw new \InvalidArgumentException('non-nullable imageurl cannot be null');
        }
        $this->container['imageurl'] = $imageurl;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int|null $count Count of the answer
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets isselected
     *
     * @return bool|null
     */
    public function getIsselected()
    {
        return $this->container['isselected'];
    }

    /**
     * Sets isselected
     *
     * @param bool|null $isselected Indicates if this answer is selected
     *
     * @return self
     */
    public function setIsselected($isselected)
    {
        if (is_null($isselected)) {
            throw new \InvalidArgumentException('non-nullable isselected cannot be null');
        }
        $this->container['isselected'] = $isselected;

        return $this;
    }

    /**
     * Gets nextquestionid
     *
     * @return int|null
     */
    public function getNextquestionid()
    {
        return $this->container['nextquestionid'];
    }

    /**
     * Sets nextquestionid
     *
     * @param int|null $nextquestionid ID of the next question
     *
     * @return self
     */
    public function setNextquestionid($nextquestionid)
    {
        if (is_null($nextquestionid)) {
            array_push($this->openAPINullablesSetToNull, 'nextquestionid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nextquestionid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nextquestionid'] = $nextquestionid;

        return $this;
    }

    /**
     * Gets attributevalues
     *
     * @return \Toppy\TweakwiseClient\Model\FilterWizardAttributeValue[]|null
     */
    public function getAttributevalues()
    {
        return $this->container['attributevalues'];
    }

    /**
     * Sets attributevalues
     *
     * @param \Toppy\TweakwiseClient\Model\FilterWizardAttributeValue[]|null $attributevalues List of attribute values
     *
     * @return self
     */
    public function setAttributevalues($attributevalues)
    {
        if (is_null($attributevalues)) {
            throw new \InvalidArgumentException('non-nullable attributevalues cannot be null');
        }
        $this->container['attributevalues'] = $attributevalues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


