<?php
/**
 * NavigationProperties
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Frontend API
 *
 * Tweakwise API.  Tweakwise offers differing REST services that can be called from various URLs and separate parameters. Response in XML and JSON format is offered for all services. XML is the default format, JSON format is also possible by adding ‘format=json’ to the call. Parameters are sent along with the query string (GET Request) via the URL.  ---  Authentication  Authentication takes place by means of a unique key valid for each instance. This key is sent along with the particular service immediately after the call and must be placed before any parameters. This key is issued by Tweakwise.
 *
 * The version of the OpenAPI document: 0.6.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Toppy\TweakwiseClient\Model;

use \ArrayAccess;
use \Toppy\TweakwiseClient\ObjectSerializer;

/**
 * NavigationProperties Class Doc Comment
 *
 * @category Class
 * @package  Toppy\TweakwiseClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NavigationProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'navigationProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nrofitems' => 'int',
        'pagesize' => 'int',
        'nrofpages' => 'int',
        'currentpage' => 'int',
        'selectedcategory' => 'int',
        'selectedcategorykey' => 'string',
        'searchterm' => 'string',
        'suggestedsearchterm' => 'string',
        'isdirectsearch' => 'bool',
        'isrootcategory' => 'bool',
        'pageurl' => 'string',
        'reseturl' => 'string',
        'sortfields' => '\Toppy\TweakwiseClient\Model\NavigationSortfield[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'nrofitems' => 'int32',
        'pagesize' => 'int32',
        'nrofpages' => 'int32',
        'currentpage' => 'int32',
        'selectedcategory' => 'int64',
        'selectedcategorykey' => null,
        'searchterm' => null,
        'suggestedsearchterm' => null,
        'isdirectsearch' => null,
        'isrootcategory' => null,
        'pageurl' => null,
        'reseturl' => null,
        'sortfields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'nrofitems' => false,
        'pagesize' => false,
        'nrofpages' => false,
        'currentpage' => false,
        'selectedcategory' => false,
        'selectedcategorykey' => false,
        'searchterm' => false,
        'suggestedsearchterm' => false,
        'isdirectsearch' => false,
        'isrootcategory' => false,
        'pageurl' => false,
        'reseturl' => false,
        'sortfields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nrofitems' => 'nrofitems',
        'pagesize' => 'pagesize',
        'nrofpages' => 'nrofpages',
        'currentpage' => 'currentpage',
        'selectedcategory' => 'selectedcategory',
        'selectedcategorykey' => 'selectedcategorykey',
        'searchterm' => 'searchterm',
        'suggestedsearchterm' => 'suggestedsearchterm',
        'isdirectsearch' => 'isdirectsearch',
        'isrootcategory' => 'isrootcategory',
        'pageurl' => 'pageurl',
        'reseturl' => 'reseturl',
        'sortfields' => 'sortfields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nrofitems' => 'setNrofitems',
        'pagesize' => 'setPagesize',
        'nrofpages' => 'setNrofpages',
        'currentpage' => 'setCurrentpage',
        'selectedcategory' => 'setSelectedcategory',
        'selectedcategorykey' => 'setSelectedcategorykey',
        'searchterm' => 'setSearchterm',
        'suggestedsearchterm' => 'setSuggestedsearchterm',
        'isdirectsearch' => 'setIsdirectsearch',
        'isrootcategory' => 'setIsrootcategory',
        'pageurl' => 'setPageurl',
        'reseturl' => 'setReseturl',
        'sortfields' => 'setSortfields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nrofitems' => 'getNrofitems',
        'pagesize' => 'getPagesize',
        'nrofpages' => 'getNrofpages',
        'currentpage' => 'getCurrentpage',
        'selectedcategory' => 'getSelectedcategory',
        'selectedcategorykey' => 'getSelectedcategorykey',
        'searchterm' => 'getSearchterm',
        'suggestedsearchterm' => 'getSuggestedsearchterm',
        'isdirectsearch' => 'getIsdirectsearch',
        'isrootcategory' => 'getIsrootcategory',
        'pageurl' => 'getPageurl',
        'reseturl' => 'getReseturl',
        'sortfields' => 'getSortfields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('nrofitems', $data ?? [], null);
        $this->setIfExists('pagesize', $data ?? [], null);
        $this->setIfExists('nrofpages', $data ?? [], null);
        $this->setIfExists('currentpage', $data ?? [], null);
        $this->setIfExists('selectedcategory', $data ?? [], null);
        $this->setIfExists('selectedcategorykey', $data ?? [], null);
        $this->setIfExists('searchterm', $data ?? [], null);
        $this->setIfExists('suggestedsearchterm', $data ?? [], null);
        $this->setIfExists('isdirectsearch', $data ?? [], null);
        $this->setIfExists('isrootcategory', $data ?? [], null);
        $this->setIfExists('pageurl', $data ?? [], null);
        $this->setIfExists('reseturl', $data ?? [], null);
        $this->setIfExists('sortfields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nrofitems
     *
     * @return int|null
     */
    public function getNrofitems()
    {
        return $this->container['nrofitems'];
    }

    /**
     * Sets nrofitems
     *
     * @param int|null $nrofitems Total number of items
     *
     * @return self
     */
    public function setNrofitems($nrofitems)
    {
        if (is_null($nrofitems)) {
            throw new \InvalidArgumentException('non-nullable nrofitems cannot be null');
        }
        $this->container['nrofitems'] = $nrofitems;

        return $this;
    }

    /**
     * Gets pagesize
     *
     * @return int|null
     */
    public function getPagesize()
    {
        return $this->container['pagesize'];
    }

    /**
     * Sets pagesize
     *
     * @param int|null $pagesize Number of items per page
     *
     * @return self
     */
    public function setPagesize($pagesize)
    {
        if (is_null($pagesize)) {
            throw new \InvalidArgumentException('non-nullable pagesize cannot be null');
        }
        $this->container['pagesize'] = $pagesize;

        return $this;
    }

    /**
     * Gets nrofpages
     *
     * @return int|null
     */
    public function getNrofpages()
    {
        return $this->container['nrofpages'];
    }

    /**
     * Sets nrofpages
     *
     * @param int|null $nrofpages Total number of pages
     *
     * @return self
     */
    public function setNrofpages($nrofpages)
    {
        if (is_null($nrofpages)) {
            throw new \InvalidArgumentException('non-nullable nrofpages cannot be null');
        }
        $this->container['nrofpages'] = $nrofpages;

        return $this;
    }

    /**
     * Gets currentpage
     *
     * @return int|null
     */
    public function getCurrentpage()
    {
        return $this->container['currentpage'];
    }

    /**
     * Sets currentpage
     *
     * @param int|null $currentpage Current selected page
     *
     * @return self
     */
    public function setCurrentpage($currentpage)
    {
        if (is_null($currentpage)) {
            throw new \InvalidArgumentException('non-nullable currentpage cannot be null');
        }
        $this->container['currentpage'] = $currentpage;

        return $this;
    }

    /**
     * Gets selectedcategory
     *
     * @return int|null
     */
    public function getSelectedcategory()
    {
        return $this->container['selectedcategory'];
    }

    /**
     * Sets selectedcategory
     *
     * @param int|null $selectedcategory Selected category
     *
     * @return self
     */
    public function setSelectedcategory($selectedcategory)
    {
        if (is_null($selectedcategory)) {
            throw new \InvalidArgumentException('non-nullable selectedcategory cannot be null');
        }
        $this->container['selectedcategory'] = $selectedcategory;

        return $this;
    }

    /**
     * Gets selectedcategorykey
     *
     * @return string|null
     */
    public function getSelectedcategorykey()
    {
        return $this->container['selectedcategorykey'];
    }

    /**
     * Sets selectedcategorykey
     *
     * @param string|null $selectedcategorykey Selected category key. In case of alphanumeric category identifiers, this field will be populated with the category key. In case of numeric category id's, this field will be populated with the category id.
     *
     * @return self
     */
    public function setSelectedcategorykey($selectedcategorykey)
    {
        if (is_null($selectedcategorykey)) {
            throw new \InvalidArgumentException('non-nullable selectedcategorykey cannot be null');
        }
        $this->container['selectedcategorykey'] = $selectedcategorykey;

        return $this;
    }

    /**
     * Gets searchterm
     *
     * @return string|null
     */
    public function getSearchterm()
    {
        return $this->container['searchterm'];
    }

    /**
     * Sets searchterm
     *
     * @param string|null $searchterm Current search term
     *
     * @return self
     */
    public function setSearchterm($searchterm)
    {
        if (is_null($searchterm)) {
            throw new \InvalidArgumentException('non-nullable searchterm cannot be null');
        }
        $this->container['searchterm'] = $searchterm;

        return $this;
    }

    /**
     * Gets suggestedsearchterm
     *
     * @return string|null
     */
    public function getSuggestedsearchterm()
    {
        return $this->container['suggestedsearchterm'];
    }

    /**
     * Sets suggestedsearchterm
     *
     * @param string|null $suggestedsearchterm Suggested search term
     *
     * @return self
     */
    public function setSuggestedsearchterm($suggestedsearchterm)
    {
        if (is_null($suggestedsearchterm)) {
            throw new \InvalidArgumentException('non-nullable suggestedsearchterm cannot be null');
        }
        $this->container['suggestedsearchterm'] = $suggestedsearchterm;

        return $this;
    }

    /**
     * Gets isdirectsearch
     *
     * @return bool|null
     */
    public function getIsdirectsearch()
    {
        return $this->container['isdirectsearch'];
    }

    /**
     * Sets isdirectsearch
     *
     * @param bool|null $isdirectsearch true/false to indicate if it's a direct search. It's true when: it's a search page, 1 category is selected and sort options isn't active.
     *
     * @return self
     */
    public function setIsdirectsearch($isdirectsearch)
    {
        if (is_null($isdirectsearch)) {
            throw new \InvalidArgumentException('non-nullable isdirectsearch cannot be null');
        }
        $this->container['isdirectsearch'] = $isdirectsearch;

        return $this;
    }

    /**
     * Gets isrootcategory
     *
     * @return bool|null
     */
    public function getIsrootcategory()
    {
        return $this->container['isrootcategory'];
    }

    /**
     * Sets isrootcategory
     *
     * @param bool|null $isrootcategory true/false to indicate if the current category is the root category
     *
     * @return self
     */
    public function setIsrootcategory($isrootcategory)
    {
        if (is_null($isrootcategory)) {
            throw new \InvalidArgumentException('non-nullable isrootcategory cannot be null');
        }
        $this->container['isrootcategory'] = $isrootcategory;

        return $this;
    }

    /**
     * Gets pageurl
     *
     * @return string|null
     */
    public function getPageurl()
    {
        return $this->container['pageurl'];
    }

    /**
     * Sets pageurl
     *
     * @param string|null $pageurl Current page URL without pagination
     *
     * @return self
     */
    public function setPageurl($pageurl)
    {
        if (is_null($pageurl)) {
            throw new \InvalidArgumentException('non-nullable pageurl cannot be null');
        }
        $this->container['pageurl'] = $pageurl;

        return $this;
    }

    /**
     * Gets reseturl
     *
     * @return string|null
     */
    public function getReseturl()
    {
        return $this->container['reseturl'];
    }

    /**
     * Sets reseturl
     *
     * @param string|null $reseturl URL to reset all filters
     *
     * @return self
     */
    public function setReseturl($reseturl)
    {
        if (is_null($reseturl)) {
            throw new \InvalidArgumentException('non-nullable reseturl cannot be null');
        }
        $this->container['reseturl'] = $reseturl;

        return $this;
    }

    /**
     * Gets sortfields
     *
     * @return \Toppy\TweakwiseClient\Model\NavigationSortfield[]|null
     */
    public function getSortfields()
    {
        return $this->container['sortfields'];
    }

    /**
     * Sets sortfields
     *
     * @param \Toppy\TweakwiseClient\Model\NavigationSortfield[]|null $sortfields sortfields
     *
     * @return self
     */
    public function setSortfields($sortfields)
    {
        if (is_null($sortfields)) {
            throw new \InvalidArgumentException('non-nullable sortfields cannot be null');
        }
        $this->container['sortfields'] = $sortfields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


